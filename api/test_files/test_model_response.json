{
    "name": "TravHaran/rust-calculator",
    "path": "rust-calculator/",
    "type": "folder",
    "keywords": [],
    "children": [
        {
            "name": "Cargo.lock",
            "path": "rust-calculator/Cargo.lock",
            "type": "file",
            "keywords": [
                "ensure",
                "code",
                "precise",
                "versions",
                "registry",
                "provided",
                "Rust",
                "editing",
                "used",
                "dependencies",
                "consistency",
                "intended",
                "include",
                "checksums",
                "file",
                "listed",
                "project",
                "package",
                "specify",
                "packages",
                "Cargo",
                "crates.io",
                "lists",
                "builds",
                "Cargo.lock",
                "itertools",
                "sourced",
                "projects",
                "version",
                "[",
                "editing",
                "name",
                "dependencies",
                "intended",
                "]",
                "registry+https",
                "file",
                "package",
                "source",
                "=",
                "@",
                "generated",
                "//github.com/rust-lang/crates.io-index",
                "itertools",
                "calc",
                "Cargo.",
                "checksum",
                "version"
            ],
            "annotation": "The code provided is a snippet from a Cargo.lock file, which is used in Rust projects to specify and lock down the precise versions of dependencies. It lists project packages and their dependencies with specific versions and checksums to ensure consistency across builds. The packages listed include \"calc\" (version 0.1.0), \"either\" (version 1.6.1), and \"itertools\" (version 0.10.0), along with their dependencies and checksums sourced from the Rust package registry, crates.io. This file is auto-generated by Cargo and not intended for manual editing.",
            "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\n[[package]]\nname = \"calc\"\nversion = \"0.1.0\"\ndependencies = [\n \"itertools\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457\"\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37d572918e350e82412fe766d24b15e6682fb2ed2bbe018280caa810397cb319\"\ndependencies = [\n \"either\",\n]\n"
        },
        {
            "name": "Cargo.toml",
            "path": "rust-calculator/Cargo.toml",
            "type": "file",
            "keywords": [
                "named",
                "information",
                "author",
                "edition",
                "code",
                "crate",
                "including",
                "Rust",
                "uses",
                "configuration",
                "used",
                "written",
                "metadata",
                "section",
                "dependencies",
                "manager",
                "dependency",
                "manage",
                "]",
                "project",
                "defines",
                "details",
                "package",
                "TOML",
                "Cargo",
                "lists",
                "applications",
                "configure",
                "itertools",
                "calc",
                "helps",
                "projects",
                "version",
                ">",
                "edition",
                "[",
                "Henry",
                "See",
                "name",
                "https",
                "dependencies",
                "authors",
                "Boisdequin",
                "]",
                "package",
                "<",
                "definitions",
                "=",
                "@",
                "itertools",
                "calc",
                "keys",
                "version"
            ],
            "annotation": "The code is written in TOML, typically used for Rust projects to configure the Cargo package manager. The [package] section defines metadata for the project named \"calc\", including its version \"0.1.0\", the author's information, and the Rust edition it uses (\"2018\"). The [dependencies] section lists the external Rust crate \"itertools\" with version \"0.10\" as a dependency for the project. This configuration helps manage project details and dependencies for Rust applications.",
            "content": "[package]\nname = \"calc\"\nversion = \"0.1.0\"\nauthors = [\"Henry Boisdequin <65845077+henryboisdequin@users.noreply.github.com>\"]\nedition = \"2018\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nitertools = \"0.10\"\n"
        },
        {
            "name": "README.md",
            "path": "rust-calculator/README.md",
            "type": "file",
            "keywords": [
                "tests",
                "ensure",
                "calculator",
                "running",
                "provided",
                "performs",
                "Rust",
                "test",
                "written",
                "repository",
                "cargo",
                "run",
                "using",
                "manager",
                "project",
                "framework",
                "tested",
                "package",
                "directory",
                "Cargo",
                "users",
                "clone",
                "instructs",
                "navigate",
                "execute",
                "installed",
                "guide",
                "advises",
                "operations",
                "Clone",
                "cargo",
                "run",
                "calculator",
                "Run1",
                "Make",
                "directory",
                "type",
                "Rust.",
                "repository2",
                "Rust",
                "Cd",
                "installed3",
                "test",
                "project"
            ],
            "annotation": "The provided text is a brief guide for running a simple command-line calculator project written in Rust. It instructs users on how to clone the repository, ensure that Rust and the Cargo package manager are installed, navigate to the project directory, and execute the project using cargo run. Additionally, it advises on how to run tests with cargo test. The calculator likely performs basic arithmetic operations and is tested through the provided test framework.",
            "content": "Simple command-line calculator in Rust.\n\n## To Run\n\n1. Clone this repository\n\n2. Make sure you have Rust and cargo installed\n\n3. Cd into the project directory and type `cargo run`\n\n4. To test: run `cargo test`\n"
        },
        {
            "name": "src",
            "path": "rust-calculator/src",
            "type": "folder",
            "keywords": [],
            "children": [
                {
                    "name": "calc.rs",
                    "path": "rust-calculator/src/calc.rs",
                    "type": "file",
                    "keywords": [
                        "validate",
                        "applies",
                        "code",
                        "struct",
                        "subtraction",
                        "vector",
                        "Rust",
                        "divides",
                        "uses",
                        "verify",
                        "used",
                        "import",
                        "test",
                        "cases",
                        "test_all_operations",
                        "Calc",
                        "subtracts",
                        "element",
                        "vectors",
                        "sums",
                        "multiplies",
                        "division",
                        "functionality",
                        "defines",
                        "div",
                        "add",
                        "methods",
                        "addition",
                        "elements",
                        "Expected",
                        "summation",
                        "use",
                        "starting",
                        "assertions",
                        "method",
                        "function",
                        "itertools",
                        "multiplication",
                        "operation",
                        ":Itertools",
                        "numbers",
                        "results",
                        "operations",
                        "includes",
                        "f64",
                        "arr",
                        ">",
                        "struct",
                        ":sub",
                        ".product",
                        "assert_eq",
                        ".fold1",
                        "subtraction",
                        ".unwrap_or",
                        "mul",
                        "pub",
                        "x",
                        "test",
                        "Div",
                        ".sum",
                        "test_all_operations",
                        "Calc",
                        "Vec",
                        "sub",
                        "|",
                        "]",
                        "-6.0",
                        "-3.0",
                        "division",
                        "std",
                        "fn",
                        "<",
                        "div",
                        "add",
                        "Sub",
                        "arr.iter",
                        "addition",
                        "use",
                        ".map",
                        ":mul",
                        "itertools",
                        ":div",
                        "multiplication",
                        ":ops",
                        ":Itertools",
                        ":add",
                        ".to_vec",
                        "x|"
                    ],
                    "annotation": "This Rust code defines a Calc struct that includes four static methods for basic arithmetic operations on vectors of floating-point numbers: addition, subtraction, multiplication, and division. The add method sums all elements in the vector, sub subtracts all elements sequentially, mul multiplies all elements, and div divides each element sequentially. The use itertools::Itertools import is used for the fold1 method, which applies a function across the vector starting with the first element. The code includes a test function test_all_operations, which uses assertions to verify the correctness of each arithmetic operation with multiple test cases. Expected outputs validate correct functionality: summation, subtraction, multiplication, and division results as per the provided test cases.",
                    "content": "use itertools::Itertools;\nuse std::ops::{Div, Sub};\n\npub struct Calc;\n\nimpl Calc {\n    pub fn add(arr: Vec<f64>) -> f64 {\n        arr.iter().sum::<f64>()\n    }\n\n    pub fn sub(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Sub::sub).unwrap_or(0.0)\n    }\n\n    pub fn mul(arr: Vec<f64>) -> f64 {\n        arr.iter().product()\n    }\n\n    pub fn div(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Div::div).unwrap_or(0.0)\n    }\n}\n\n#[test]\nfn test_all_operations() {\n    // addition\n    assert_eq!(Calc::add([2.0, 4.0, 6.0].to_vec()), 12.0);\n    assert_eq!(Calc::add([-6.0, 5.0, 10.0].to_vec()), 9.0);\n\n    // subtraction\n    assert_eq!(Calc::sub([10.0, 4.0, 6.0].to_vec()), 0.0);\n    assert_eq!(Calc::sub([100.0, 10.0, 19.0].to_vec()), 71.0);\n\n    // multiplication\n    assert_eq!(Calc::mul([10.0, 10.0, 2.0].to_vec()), 200.0);\n    assert_eq!(Calc::mul([-3.0, 2.0].to_vec()), -6.0);\n\n    // division\n    assert_eq!(Calc::div([54.0, 2.0, 3.0].to_vec()), 9.0);\n    assert_eq!(Calc::div([4.0, 2.0, 5.0].to_vec()), 0.4);\n}\n"
                },
                {
                    "name": "main.rs",
                    "path": "rust-calculator/src/main.rs",
                    "type": "file",
                    "keywords": [
                        "implements",
                        "corresponding",
                        "code",
                        "calculator",
                        "loop",
                        "operators",
                        "performs",
                        "Rust",
                        "written",
                        "operands",
                        "splits",
                        "/",
                        "using",
                        "Calc",
                        "defined",
                        "continues",
                        "point",
                        "message",
                        "operator",
                        "exits",
                        "result",
                        "equation",
                        "console",
                        "quit",
                        "users",
                        "*",
                        "parses",
                        "inputs",
                        "functions",
                        "calculation",
                        "module",
                        "allowing",
                        "operation",
                        "printed",
                        "equations",
                        "reads",
                        "input",
                        "numbers",
                        "prints",
                        "f64",
                        "q\\",
                        ">",
                        "[",
                        "mod",
                        "calculator",
                        ":sub",
                        "subtraction",
                        "None",
                        "valid_operators",
                        ":Calc",
                        "Rust",
                        "str",
                        "Welcome",
                        "built",
                        "Invalid",
                        ".ok",
                        "panic",
                        "supported",
                        "input.find",
                        "program",
                        "/",
                        "using",
                        "Vec",
                        "Calc",
                        "parts",
                        "]",
                        "\\",
                        "Failed",
                        "let",
                        "division",
                        "read",
                        "mut",
                        "std",
                        ":io",
                        "+",
                        "operator",
                        "match",
                        "parts.len",
                        ".trim",
                        "counter",
                        "number",
                        "+=",
                        "Thanks",
                        "String",
                        "equation",
                        "<",
                        "println",
                        "addition",
                        "quit",
                        "=",
                        ":stdin",
                        ".collect",
                        "val",
                        "==",
                        "*",
                        "_",
                        ".expect",
                        ":mul",
                        "input.split",
                        "continue",
                        "break",
                        ":div",
                        ":new",
                        "calc",
                        "multiplication",
                        "io",
                        "vec",
                        ".read_line",
                        "input",
                        "Enter",
                        "Please",
                        ":add"
                    ],
                    "annotation": "The code is written in Rust and implements a simple console-based calculator. It reads user input in a loop, allowing users to enter arithmetic equations or \"q\" to quit. The valid operators are \"+\", \"-\", \"*\", and \"/\". It splits the input equation at the operator, parses the operands into floating-point numbers, and performs the corresponding arithmetic operation using the functions defined in a custom Calc module. The result of the calculation is then printed to the console. The loop continues until the user inputs \"q\", at which point it prints a goodbye message and exits.",
                    "content": "mod calc;\nuse calc::Calc;\nuse std::io;\n\nfn main() {\n    println!(\"Welcome to the a basic calculator built with Rust.\");\n\n    loop {\n        println!(\"Please enter an equation or \\\"q\\\" to quit: \");\n\n        let mut input = String::new();\n        io::stdin()\n            .read_line(&mut input)\n            .expect(\"Failed to read input\");\n\n        if input.trim() == \"q\" {\n            println!(\"Thanks for using this program.\");\n            break;\n        }\n\n        let valid_operators = vec![\"+\", \"-\", \"*\", \"/\"];\n\n        for operator in valid_operators {\n            match input.find(operator) {\n                Some(_) => {\n                    let parts: Vec<&str> = input.split(operator).collect();\n\n                    if parts.len() < 2 {\n                        panic!(\"Invalid equation.\");\n                    }\n\n                    let mut number_array = vec![];\n                    let mut counter = 0;\n\n                    while counter != parts.len() {\n                        let val: f64 = parts[counter].trim().parse().ok().expect(\"Enter a number.\");\n                        number_array.push(val);\n                        counter += 1;\n                    }\n\n                    match operator {\n                        \"+\" => println!(\"{}\", Calc::add(number_array)),\n                        \"-\" => println!(\"{}\", Calc::sub(number_array)),\n                        \"*\" => println!(\"{}\", Calc::mul(number_array)),\n                        \"/\" => println!(\"{}\", Calc::div(number_array)),\n                        _ => println!(\"Only addition, subtraction, multiplication and division are supported.\")\n                    }\n                }\n\n                None => {\n                    continue;\n                }\n            }\n        }\n    }\n}\n"
                }
            ]
        }
    ]
}