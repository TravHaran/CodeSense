{
    "name": "TravHaran/rust-calculator",
    "path": "rust-calculator/",
    "type": "folder",
    "keywords": [],
    "children": [
        {
            "name": "Cargo.lock",
            "path": "rust-calculator/Cargo.lock",
            "type": "file",
            "keywords": [
                "source",
                "depends",
                "project",
                "file",
                "ensure",
                "Cargo\u2014the",
                "sources",
                "written",
                "checksum",
                "Rust",
                "lists",
                "build",
                "package",
                "packages",
                "dependencies",
                "meant",
                "consistency",
                "checksums",
                "track",
                "TOML",
                "Minimal",
                "dependency",
                "Tom",
                "snippet",
                "code",
                "version",
                "builds",
                "Obvious",
                "used",
                "system\u2014and",
                "itertools",
                "include",
                "versions",
                "generated",
                "edited",
                "manager",
                "listed",
                "provided",
                "Cargo.lock",
                "Language",
                "source",
                "=",
                "file",
                "calc",
                "@",
                "checksum",
                "intended",
                "package",
                "dependencies",
                "version",
                "//github.com/rust-lang/crates.io-index",
                "Cargo.",
                "itertools",
                "[",
                "generated",
                "]",
                "name",
                "registry+https",
                "editing"
            ],
            "annotation": "The provided code is a snippet of a Cargo.lock file written in TOML (Tom's Obvious, Minimal Language). This file is automatically generated by Cargo\u2014the Rust package manager and build system\u2014and it is used to track the exact versions of dependencies used in a Rust project. The file lists packages, their versions, sources, and checksums to ensure consistency across builds. The listed packages include \"calc\" version \"0.1.0\" with a dependency on \"itertools\", \"either\" version \"1.6.1\" with its source and checksum, and \"itertools\" version \"0.10.0\", which also depends on \"either\". This file is not meant to be edited manually.",
            "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\n[[package]]\nname = \"calc\"\nversion = \"0.1.0\"\ndependencies = [\n \"itertools\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457\"\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37d572918e350e82412fe766d24b15e6682fb2ed2bbe018280caa810397cb319\"\ndependencies = [\n \"either\",\n]\n",
            "link": "https://github.com/TravHaran/rust-calculator/blob/master/Cargo.lock"
        },
        {
            "name": "Cargo.toml",
            "path": "rust-calculator/Cargo.toml",
            "type": "file",
            "keywords": [
                "Henry",
                "project",
                "file",
                "environment",
                "specifies",
                "format",
                "uses",
                "section",
                "calc",
                "ecosystem",
                "written",
                "Rust",
                "execution",
                "crate",
                "lists",
                "sets",
                "dependencies",
                "TOML",
                "Minimal",
                "dependency",
                "email",
                "Tom",
                "snippet",
                "code",
                "version",
                "edition",
                "Boisdequin",
                "Obvious",
                "configuration",
                "metadata",
                "compilation",
                "address",
                "[",
                "name",
                "]",
                "author",
                "Language",
                "=",
                "Henry",
                "calc",
                "@",
                "package",
                "dependencies",
                "version",
                "https",
                "edition",
                "Boisdequin",
                "See",
                "definitions",
                ">",
                "[",
                "itertools",
                "name",
                "]",
                "keys",
                "authors",
                "<"
            ],
            "annotation": "This code snippet is a configuration file written in TOML (Tom's Obvious, Minimal Language) format for a Rust project. It specifies metadata and dependencies for the project. The project's name is \"calc\", its version is \"0.1.0\", and the author is \"Henry Boisdequin\" with an email address. The project uses the 2018 edition of Rust. Under the [dependencies] section, it lists a dependency on the \"itertools\" crate, version \"0.10\". This configuration sets up the project's environment and dependencies for successful compilation and execution in the Rust ecosystem.",
            "content": "[package]\nname = \"calc\"\nversion = \"0.1.0\"\nauthors = [\"Henry Boisdequin <65845077+henryboisdequin@users.noreply.github.com>\"]\nedition = \"2018\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nitertools = \"0.10\"\n",
            "link": "https://github.com/TravHaran/rust-calculator/blob/master/Cargo.toml"
        },
        {
            "name": "README.md",
            "path": "rust-calculator/README.md",
            "type": "file",
            "keywords": [
                "navigate",
                "project",
                "installed",
                "ensure",
                "containing",
                "written",
                "implements",
                "Rust",
                "using",
                "calculator",
                "directory",
                "perform",
                "functionality",
                "allows",
                "run",
                "input",
                "snippet",
                "code",
                "cargo",
                "mentions",
                "verify",
                "repository",
                "users",
                "instructions",
                "tests",
                "Cargo",
                "running",
                "clone",
                "indicate",
                "test",
                "operations",
                "Make",
                "cargo",
                "Cd",
                "Rust",
                "project",
                "calculator",
                "directory",
                "repository2",
                "Rust.",
                "installed3",
                "test",
                "Run1",
                "Clone",
                "type",
                "run"
            ],
            "annotation": "The code snippet is written in Rust and implements a simple command-line calculator. The instructions indicate how to clone the repository containing the code, ensure Rust and Cargo are installed, navigate to the project directory, and run the calculator using cargo run. Additionally, it mentions running tests with cargo test to verify the functionality. The calculator likely allows users to perform basic arithmetic operations through command-line input.",
            "content": "Simple command-line calculator in Rust.\n\n## To Run\n\n1. Clone this repository\n\n2. Make sure you have Rust and cargo installed\n\n3. Cd into the project directory and type `cargo run`\n\n4. To test: run `cargo test`\n",
            "link": "https://github.com/TravHaran/rust-calculator/blob/master/README.md"
        },
        {
            "name": "src",
            "path": "rust-calculator/src",
            "type": "folder",
            "keywords": [],
            "children": [
                {
                    "name": "calc.rs",
                    "path": "rust-calculator/src/calc.rs",
                    "type": "file",
                    "keywords": [
                        "numbers",
                        "confirm",
                        "elements",
                        "method",
                        "methods",
                        "mul",
                        "ensures",
                        "results",
                        "f64",
                        "addition",
                        "division",
                        "inputs",
                        "multiplication",
                        "written",
                        "sums",
                        "function",
                        "Rust",
                        "using",
                        "test_all_operations",
                        "example",
                        "subtraction",
                        "cases",
                        "expected",
                        "code",
                        "performs",
                        "multiplies",
                        "provides",
                        "sub",
                        "div",
                        "divisions",
                        "assertions",
                        "named",
                        "vectors",
                        "subtractions",
                        "operations",
                        "test",
                        "add",
                        "defines",
                        "Calc",
                        "struct",
                        "includes",
                        "assert_eq",
                        "std",
                        ".unwrap_or",
                        "Sub",
                        "mul",
                        ".to_vec",
                        "arr.iter",
                        "Div",
                        "|",
                        "-3.0",
                        "f64",
                        "addition",
                        ":div",
                        "division",
                        ":sub",
                        "multiplication",
                        ".fold1",
                        ":Itertools",
                        "test_all_operations",
                        "x",
                        "Vec",
                        "subtraction",
                        "-6.0",
                        "x|",
                        ".product",
                        "pub",
                        "use",
                        ":mul",
                        "sub",
                        "div",
                        "arr",
                        "fn",
                        ">",
                        "itertools",
                        ":add",
                        "]",
                        ".sum",
                        "test",
                        ":ops",
                        "add",
                        "<",
                        ".map",
                        "Calc",
                        "struct"
                    ],
                    "annotation": "The code is written in Rust and defines a struct named Calc which provides basic arithmetic operations on vectors of floating-point numbers (f64). The Calc struct includes methods for addition (add), subtraction (sub), multiplication (mul), and division (div). The add method sums all elements, the sub method performs successive subtractions, the mul method multiplies all elements, and the div method performs successive divisions. A test function test_all_operations ensures the correctness of all these operations by using assertions with example inputs and expected results. The expected outputs for the test cases will confirm the correctness of these methods.",
                    "content": "use itertools::Itertools;\nuse std::ops::{Div, Sub};\n\npub struct Calc;\n\nimpl Calc {\n    pub fn add(arr: Vec<f64>) -> f64 {\n        arr.iter().sum::<f64>()\n    }\n\n    pub fn sub(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Sub::sub).unwrap_or(0.0)\n    }\n\n    pub fn mul(arr: Vec<f64>) -> f64 {\n        arr.iter().product()\n    }\n\n    pub fn div(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Div::div).unwrap_or(0.0)\n    }\n}\n\n#[test]\nfn test_all_operations() {\n    // addition\n    assert_eq!(Calc::add([2.0, 4.0, 6.0].to_vec()), 12.0);\n    assert_eq!(Calc::add([-6.0, 5.0, 10.0].to_vec()), 9.0);\n\n    // subtraction\n    assert_eq!(Calc::sub([10.0, 4.0, 6.0].to_vec()), 0.0);\n    assert_eq!(Calc::sub([100.0, 10.0, 19.0].to_vec()), 71.0);\n\n    // multiplication\n    assert_eq!(Calc::mul([10.0, 10.0, 2.0].to_vec()), 200.0);\n    assert_eq!(Calc::mul([-3.0, 2.0].to_vec()), -6.0);\n\n    // division\n    assert_eq!(Calc::div([54.0, 2.0, 3.0].to_vec()), 9.0);\n    assert_eq!(Calc::div([4.0, 2.0, 5.0].to_vec()), 0.4);\n}\n",
                    "link": "https://github.com/TravHaran/rust-calculator/blob/master/src/calc.rs"
                },
                {
                    "name": "main.rs",
                    "path": "rust-calculator/src/main.rs",
                    "type": "file",
                    "keywords": [
                        "numbers",
                        "+",
                        "message",
                        "defines",
                        "associated",
                        "applies",
                        "methods",
                        "mul",
                        "specified",
                        "splits",
                        "/",
                        "calc",
                        "written",
                        "implements",
                        "Rust",
                        "using",
                        "example",
                        "calculator",
                        "module",
                        "quit",
                        "checks",
                        "expected",
                        "prompts",
                        "input",
                        "reads",
                        "code",
                        "output",
                        "parses",
                        "performs",
                        "operation",
                        "sub",
                        "div",
                        "equation",
                        "q",
                        "closing",
                        "operators",
                        "given",
                        "entering",
                        "named",
                        "result",
                        "displayed",
                        "add",
                        "calculations",
                        "Calc",
                        "struct",
                        "corresponding",
                        "breaks",
                        "+",
                        "=",
                        "built",
                        "operator",
                        "match",
                        ".collect",
                        "std",
                        "_",
                        "mut",
                        ".expect",
                        "Thanks",
                        "str",
                        ".trim",
                        "f64",
                        "addition",
                        ":div",
                        "calc",
                        "\\",
                        "/",
                        ":sub",
                        "multiplication",
                        "Calc",
                        "Welcome",
                        "panic",
                        "division",
                        "supported",
                        "continue",
                        "Rust",
                        "using",
                        "valid_operators",
                        "calculator",
                        "String",
                        "q\\",
                        "Vec",
                        ":new",
                        "subtraction",
                        "quit",
                        "println",
                        "counter",
                        "+=",
                        ".read_line",
                        "input",
                        "io",
                        ":io",
                        "Failed",
                        "let",
                        "input.split",
                        "program",
                        "mod",
                        "*",
                        ":mul",
                        ".ok",
                        "parts",
                        "equation",
                        "Enter",
                        "None",
                        "==",
                        "[",
                        ">",
                        "input.find",
                        ":add",
                        "val",
                        "]",
                        "break",
                        "vec",
                        "Invalid",
                        "number",
                        ":stdin",
                        "<",
                        "Please",
                        ":Calc",
                        "parts.len",
                        "read"
                    ],
                    "annotation": "The given code is written in Rust and implements a basic command-line calculator that continually prompts the user to input an equation or \"q\" to quit. The code reads user input, checks for arithmetic operators such as +, -, *, /, and performs the corresponding calculations using methods from a module named calc that defines a Calc struct with associated methods: add, sub, mul, and div. It splits the input equation, parses the numbers, and then applies the specified operation. If the input is \"q\", the loop breaks and a closing message is displayed. The expected output upon valid input is the result of the arithmetic operation; for example, entering \"3 + 4\" would output \"7\".",
                    "content": "mod calc;\nuse calc::Calc;\nuse std::io;\n\nfn main() {\n    println!(\"Welcome to the a basic calculator built with Rust.\");\n\n    loop {\n        println!(\"Please enter an equation or \\\"q\\\" to quit: \");\n\n        let mut input = String::new();\n        io::stdin()\n            .read_line(&mut input)\n            .expect(\"Failed to read input\");\n\n        if input.trim() == \"q\" {\n            println!(\"Thanks for using this program.\");\n            break;\n        }\n\n        let valid_operators = vec![\"+\", \"-\", \"*\", \"/\"];\n\n        for operator in valid_operators {\n            match input.find(operator) {\n                Some(_) => {\n                    let parts: Vec<&str> = input.split(operator).collect();\n\n                    if parts.len() < 2 {\n                        panic!(\"Invalid equation.\");\n                    }\n\n                    let mut number_array = vec![];\n                    let mut counter = 0;\n\n                    while counter != parts.len() {\n                        let val: f64 = parts[counter].trim().parse().ok().expect(\"Enter a number.\");\n                        number_array.push(val);\n                        counter += 1;\n                    }\n\n                    match operator {\n                        \"+\" => println!(\"{}\", Calc::add(number_array)),\n                        \"-\" => println!(\"{}\", Calc::sub(number_array)),\n                        \"*\" => println!(\"{}\", Calc::mul(number_array)),\n                        \"/\" => println!(\"{}\", Calc::div(number_array)),\n                        _ => println!(\"Only addition, subtraction, multiplication and division are supported.\")\n                    }\n                }\n\n                None => {\n                    continue;\n                }\n            }\n        }\n    }\n}\n",
                    "link": "https://github.com/TravHaran/rust-calculator/blob/master/src/main.rs"
                }
            ]
        }
    ]
}