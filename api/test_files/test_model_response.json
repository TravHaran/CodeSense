{
    "name": "rust-calculator",
    "path": "rust-calculator/",
    "type": "folder",
    "keywords": [],
    "children": [
        {
            "name": "Cargo.lock",
            "path": "rust-calculator/Cargo.lock",
            "type": "file",
            "keywords": [
                "package",
                "Tom",
                "project",
                "Obvious",
                "calc",
                "manager",
                "depends",
                "used",
                "index",
                "sets",
                "Rust",
                "dependencies",
                "code",
                "lists",
                "Language",
                "Cargo",
                "packages",
                "file",
                "sourced",
                "compile",
                "itertools",
                "checksums",
                "version",
                "specifies",
                "Minimal",
                "verification",
                "given",
                "TOML",
                "run",
                "required"
            ],
            "annotation": "The code is a TOML (Tom's Obvious, Minimal Language) file, typically used by Cargo, Rust's package manager. It lists the dependencies for a Rust project. The given file specifies three packages: \"calc\" (version 0.1.0), \"either\" (version 1.6.1), and \"itertools\" (version 0.10.0). The \"either\" and \"itertools\" packages are sourced from the crates.io index, along with their respective checksums for verification. \"calc\" depends on \"itertools\", and \"itertools\" depends on \"either\". This file sets up the necessary dependencies required for a Rust project to compile and run.",
            "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\n[[package]]\nname = \"calc\"\nversion = \"0.1.0\"\ndependencies = [\n \"itertools\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457\"\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37d572918e350e82412fe766d24b15e6682fb2ed2bbe018280caa810397cb319\"\ndependencies = [\n \"either\",\n]\n"
        },
        {
            "name": "Cargo.toml",
            "path": "rust-calculator/Cargo.toml",
            "type": "file",
            "keywords": [
                "declares",
                "package",
                "Tom",
                "project",
                "named",
                "Obvious",
                "metadata",
                "calc",
                "depends",
                "used",
                "Rust",
                "crate",
                "setup",
                "dependencies",
                "projects",
                "code",
                "written",
                "edition",
                "Henry",
                "Language",
                "segment",
                "Boisdequin",
                "file",
                "configuration",
                "managing",
                "version",
                "specifies",
                "format",
                "helps",
                "Minimal",
                "authored",
                "TOML",
                "configurations"
            ],
            "annotation": "The code is a segment of a `Cargo.toml` file, written in the TOML (Tom's Obvious, Minimal Language) format, used in Rust projects for configuration. It specifies metadata and dependencies for a Rust package named \"calc\". The package version is \"0.1.0\", authored by Henry Boisdequin. The Rust edition used is 2018. It declares that the package depends on the \"itertools\" crate, version \"0.10\". This setup file helps in managing the project's dependencies and configurations.",
            "content": "[package]\nname = \"calc\"\nversion = \"0.1.0\"\nauthors = [\"Henry Boisdequin <65845077+henryboisdequin@users.noreply.github.com>\"]\nedition = \"2018\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nitertools = \"0.10\"\n"
        },
        {
            "name": "README.md",
            "path": "rust-calculator/README.md",
            "type": "file",
            "keywords": [
                "outlines",
                "expected",
                "package",
                "execute",
                "program",
                "ensure",
                "project",
                "calculator",
                "manager",
                "cargo",
                "Rust",
                "command-line",
                "system",
                "code",
                "written",
                "operations",
                "directory",
                "command",
                "perform",
                "Cargo",
                "test",
                "containing",
                "provided",
                "use",
                "testing",
                "need",
                "repository",
                "steps",
                "inputs",
                "purposes",
                "Navigate",
                "run"
            ],
            "annotation": "The provided text outlines steps to run a simple command-line calculator written in Rust. To execute this program, you need to clone the repository containing the code. Then, ensure Rust and its package manager, Cargo, are installed on your system. Navigate into the project directory and run the command `cargo run` to initiate the calculator. For testing purposes, use the `cargo test` command. The program is expected to perform basic arithmetic operations via command-line inputs.",
            "content": "Simple command-line calculator in Rust.\n\n## To Run\n\n1. Clone this repository\n\n2. Make sure you have Rust and cargo installed\n\n3. Cd into the project directory and type `cargo run`\n\n4. To test: run `cargo test`\n"
        },
        {
            "name": "src",
            "path": "rust-calculator/src",
            "type": "folder",
            "keywords": [],
            "children": [
                {
                    "name": "calc.rs",
                    "path": "rust-calculator/src/calc.rs",
                    "type": "file",
                    "keywords": [
                        "output",
                        "simplifies",
                        "sequence",
                        "vector",
                        "elements",
                        "ensure",
                        "processes",
                        "subtraction",
                        "computes",
                        "result",
                        "Expected",
                        "assertion",
                        "implementation",
                        "Rust",
                        "Calc",
                        "method",
                        "struct",
                        "code",
                        "operations",
                        "divides",
                        "completion",
                        "intended",
                        "methods",
                        "div",
                        "failures",
                        "perform",
                        "test",
                        "mul",
                        "defines",
                        "Itertools",
                        "validate",
                        "provided",
                        "add",
                        "product",
                        "sub",
                        "function",
                        "subtracts",
                        "tests",
                        "division",
                        "correctness",
                        "returning",
                        "addition",
                        "multiplication",
                        "numbers",
                        "iterators",
                        "assertions",
                        "confirming",
                        "run",
                        "leverages"
                    ],
                    "annotation": "The provided Rust code defines a `Calc` struct with methods for basic arithmetic operations (addition, subtraction, multiplication, and division) on a vector of floating-point numbers. The implementation leverages the `Itertools` crate for its `fold1` method, which simplifies operations on iterators. Each function (`add`, `sub`, `mul`, `div`) processes the vector: `add` sums the elements, `sub` subtracts elements successively, `mul` computes the product, and `div` divides them in sequence, all returning a `f64` result. The included tests validate these methods with assertions to ensure correctness. Expected output in a test run would be the successful completion without assertion failures, confirming the operations perform as intended.",
                    "content": "use itertools::Itertools;\nuse std::ops::{Div, Sub};\n\npub struct Calc;\n\nimpl Calc {\n    pub fn add(arr: Vec<f64>) -> f64 {\n        arr.iter().sum::<f64>()\n    }\n\n    pub fn sub(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Sub::sub).unwrap_or(0.0)\n    }\n\n    pub fn mul(arr: Vec<f64>) -> f64 {\n        arr.iter().product()\n    }\n\n    pub fn div(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Div::div).unwrap_or(0.0)\n    }\n}\n\n#[test]\nfn test_all_operations() {\n    // addition\n    assert_eq!(Calc::add([2.0, 4.0, 6.0].to_vec()), 12.0);\n    assert_eq!(Calc::add([-6.0, 5.0, 10.0].to_vec()), 9.0);\n\n    // subtraction\n    assert_eq!(Calc::sub([10.0, 4.0, 6.0].to_vec()), 0.0);\n    assert_eq!(Calc::sub([100.0, 10.0, 19.0].to_vec()), 71.0);\n\n    // multiplication\n    assert_eq!(Calc::mul([10.0, 10.0, 2.0].to_vec()), 200.0);\n    assert_eq!(Calc::mul([-3.0, 2.0].to_vec()), -6.0);\n\n    // division\n    assert_eq!(Calc::div([54.0, 2.0, 3.0].to_vec()), 9.0);\n    assert_eq!(Calc::div([4.0, 2.0, 5.0].to_vec()), 0.4);\n}\n"
                },
                {
                    "name": "main.rs",
                    "path": "rust-calculator/src/main.rs",
                    "type": "file",
                    "keywords": [
                        "output",
                        "module",
                        "expected",
                        "valid",
                        "based",
                        "program",
                        "implements",
                        "printed",
                        "calculator",
                        "q",
                        "subtraction",
                        "result",
                        "user",
                        "reads",
                        "Rust",
                        "performed",
                        "operator",
                        "exits",
                        "Calc",
                        "operators",
                        "prompts",
                        "+",
                        "code",
                        "thanks",
                        "operations",
                        "using",
                        "parse",
                        "methods",
                        "/",
                        "checks",
                        "operation",
                        "found",
                        "provided",
                        "splits",
                        "quit",
                        "division",
                        "equation",
                        "addition",
                        "multiplication",
                        "numbers",
                        "inputs",
                        "varies",
                        "input"
                    ],
                    "annotation": "This Rust code implements a simple command-line calculator. The program repeatedly prompts the user to enter a mathematical equation or \"q\" to quit. It reads the input, checks for valid operators (+, -, *, /), and splits the input based on the found operator to parse numbers. The relevant operation (addition, subtraction, multiplication, division) is performed using methods from a `Calc` module, and the result is printed. If the user inputs \"q\", the program thanks the user and exits. The expected output varies based on the input operations provided by the user.",
                    "content": "mod calc;\nuse calc::Calc;\nuse std::io;\n\nfn main() {\n    println!(\"Welcome to the a basic calculator built with Rust.\");\n\n    loop {\n        println!(\"Please enter an equation or \\\"q\\\" to quit: \");\n\n        let mut input = String::new();\n        io::stdin()\n            .read_line(&mut input)\n            .expect(\"Failed to read input\");\n\n        if input.trim() == \"q\" {\n            println!(\"Thanks for using this program.\");\n            break;\n        }\n\n        let valid_operators = vec![\"+\", \"-\", \"*\", \"/\"];\n\n        for operator in valid_operators {\n            match input.find(operator) {\n                Some(_) => {\n                    let parts: Vec<&str> = input.split(operator).collect();\n\n                    if parts.len() < 2 {\n                        panic!(\"Invalid equation.\");\n                    }\n\n                    let mut number_array = vec![];\n                    let mut counter = 0;\n\n                    while counter != parts.len() {\n                        let val: f64 = parts[counter].trim().parse().ok().expect(\"Enter a number.\");\n                        number_array.push(val);\n                        counter += 1;\n                    }\n\n                    match operator {\n                        \"+\" => println!(\"{}\", Calc::add(number_array)),\n                        \"-\" => println!(\"{}\", Calc::sub(number_array)),\n                        \"*\" => println!(\"{}\", Calc::mul(number_array)),\n                        \"/\" => println!(\"{}\", Calc::div(number_array)),\n                        _ => println!(\"Only addition, subtraction, multiplication and division are supported.\")\n                    }\n                }\n\n                None => {\n                    continue;\n                }\n            }\n        }\n    }\n}\n"
                }
            ]
        }
    ]
}