{
    "question": "is there a division operation in this project?",
    "answer": "",
    "input_keywords": [
        "division",
        "project",
        "operation"
    ],
    "results": [
        {
            "score": 0.3333333333333333,
            "matched_keywords": [
                "project"
            ],
            "node": {
                "name": "Cargo.toml",
                "path": "rust-calculator/Cargo.toml",
                "type": "file",
                "keywords": [
                    "provided",
                    "project",
                    "Rust",
                    "Boisdequin",
                    "name",
                    "includes",
                    "Henry",
                    "package",
                    "case",
                    "structured",
                    "file",
                    "defines",
                    "authored",
                    "code",
                    "management",
                    "dependencies",
                    "named",
                    "depends",
                    "author",
                    "version",
                    "metadata",
                    "calc",
                    "Cargo.toml",
                    "written",
                    ">",
                    "Boisdequin",
                    "name",
                    "@",
                    "itertools",
                    "]",
                    "edition",
                    "Henry",
                    "package",
                    "authors",
                    "=",
                    "keys",
                    "dependencies",
                    "https",
                    "definitions",
                    "<",
                    "version",
                    "[",
                    "See",
                    "calc"
                ],
                "annotation": "The provided code is a Cargo.toml file, written in Rust for package management. It includes metadata like the package name, version, author, and dependencies. In this case, the package is named \"calc\" with version \"0.1.0\", authored by \"Henry Boisdequin\", and depends on the \"itertools\" library version \"0.10\". This file defines how the Rust project is structured and its external dependencies.",
                "content": "[package]\nname = \"calc\"\nversion = \"0.1.0\"\nauthors = [\"Henry Boisdequin <65845077+henryboisdequin@users.noreply.github.com>\"]\nedition = \"2018\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nitertools = \"0.10\"\n",
                "link": "https://github.com/TravHaran/rust-calculator/blob/master/Cargo.toml"
            },
            "highlights": "The provided code is a Cargo.toml file, written in Rust for package management. It includes metadata like the package name, version, author, and dependencies. In this case, the package is named \"calc\" with version \"0.1.0\", authored by \"Henry Boisdequin\", and depends on the \"itertools\" library version \"0.10\". This file defines how the Rust **project** is structured and its external dependencies."
        },
        {
            "score": 0.3333333333333333,
            "matched_keywords": [
                "project"
            ],
            "node": {
                "name": "README.md",
                "path": "rust-calculator/README.md",
                "type": "file",
                "keywords": [
                    "implemented",
                    "provided",
                    "project",
                    "Rust",
                    "clone",
                    "run",
                    "cargo",
                    "use",
                    "calculator",
                    "command",
                    "directory",
                    "code",
                    "installed",
                    "execute",
                    "Cargo",
                    "repository",
                    "ensure",
                    "navigate",
                    "test",
                    "directory",
                    "calculator",
                    "Rust.",
                    "installed3",
                    "type",
                    "Clone",
                    "project",
                    "Run1",
                    "Rust",
                    "Cd",
                    "Make",
                    "test",
                    "run",
                    "repository2",
                    "cargo"
                ],
                "annotation": "The provided code is a simple command-line calculator implemented in Rust. To execute it, clone the repository, ensure Rust and Cargo are installed, navigate to the project directory, and run cargo run. To test the code, use the command cargo test.",
                "content": "Simple command-line calculator in Rust.\n\n## To Run\n\n1. Clone this repository\n\n2. Make sure you have Rust and cargo installed\n\n3. Cd into the project directory and type `cargo run`\n\n4. To test: run `cargo test`\n",
                "link": "https://github.com/TravHaran/rust-calculator/blob/master/README.md"
            },
            "highlights": "The provided code is a simple command-line calculator implemented in Rust. To execute it, clone the repository, ensure Rust and Cargo are installed, navigate to the **project** directory, and run cargo run. To test the code, use the command cargo test."
        },
        {
            "score": 0.3333333333333333,
            "matched_keywords": [
                "division"
            ],
            "node": {
                "name": "calc.rs",
                "path": "rust-calculator/src/calc.rs",
                "type": "file",
                "keywords": [
                    "struct",
                    "mul",
                    "Rust",
                    "input",
                    "test_all_operations",
                    "subtraction",
                    "numbers",
                    "performs",
                    "arrays",
                    "division",
                    "div",
                    "function",
                    "methods",
                    "expected",
                    "add",
                    "defines",
                    "code",
                    "Calc",
                    "asserting",
                    "results",
                    "operations",
                    "addition",
                    "multiplication",
                    "validates",
                    "test",
                    ">",
                    ":add",
                    "f64",
                    ".to_vec",
                    "-6.0",
                    "struct",
                    "mul",
                    "test_all_operations",
                    "std",
                    "subtraction",
                    "pub",
                    "use",
                    "itertools",
                    "arr",
                    "]",
                    ":ops",
                    "-3.0",
                    "division",
                    "assert_eq",
                    "div",
                    ".unwrap_or",
                    "Sub",
                    "add",
                    "Calc",
                    "arr.iter",
                    ":mul",
                    ".fold1",
                    "Vec",
                    ":div",
                    "Div",
                    "|",
                    ":Itertools",
                    "fn",
                    ".sum",
                    ".product",
                    ".map",
                    "x|",
                    "<",
                    ":sub",
                    "addition",
                    "multiplication",
                    "test",
                    "x",
                    "sub"
                ],
                "annotation": "This Rust code defines a Calc struct with methods for basic arithmetic operations (add, sub, mul, div). It performs addition, subtraction, multiplication, and division on arrays of floating-point numbers. The test function test_all_operations validates the correctness of these operations with various input arrays, asserting against expected results.",
                "content": "use itertools::Itertools;\nuse std::ops::{Div, Sub};\n\npub struct Calc;\n\nimpl Calc {\n    pub fn add(arr: Vec<f64>) -> f64 {\n        arr.iter().sum::<f64>()\n    }\n\n    pub fn sub(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Sub::sub).unwrap_or(0.0)\n    }\n\n    pub fn mul(arr: Vec<f64>) -> f64 {\n        arr.iter().product()\n    }\n\n    pub fn div(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Div::div).unwrap_or(0.0)\n    }\n}\n\n#[test]\nfn test_all_operations() {\n    // addition\n    assert_eq!(Calc::add([2.0, 4.0, 6.0].to_vec()), 12.0);\n    assert_eq!(Calc::add([-6.0, 5.0, 10.0].to_vec()), 9.0);\n\n    // subtraction\n    assert_eq!(Calc::sub([10.0, 4.0, 6.0].to_vec()), 0.0);\n    assert_eq!(Calc::sub([100.0, 10.0, 19.0].to_vec()), 71.0);\n\n    // multiplication\n    assert_eq!(Calc::mul([10.0, 10.0, 2.0].to_vec()), 200.0);\n    assert_eq!(Calc::mul([-3.0, 2.0].to_vec()), -6.0);\n\n    // division\n    assert_eq!(Calc::div([54.0, 2.0, 3.0].to_vec()), 9.0);\n    assert_eq!(Calc::div([4.0, 2.0, 5.0].to_vec()), 0.4);\n}\n",
                "link": "https://github.com/TravHaran/rust-calculator/blob/master/src/calc.rs"
            },
            "highlights": "This Rust code defines a Calc struct with methods for basic arithmetic operations (add, sub, mul, div). It performs addition, subtraction, multiplication, and **division** on arrays of floating-point numbers. The test function test_all_operations validates the correctness of these operations with various input arrays, asserting against expected results."
        },
        {
            "score": 0.3333333333333333,
            "matched_keywords": [
                "division"
            ],
            "node": {
                "name": "main.rs",
                "path": "rust-calculator/src/main.rs",
                "type": "file",
                "keywords": [
                    "chosen",
                    "struct",
                    "Rust",
                    "input",
                    "+",
                    "calculations",
                    "operators",
                    "prints",
                    "calculator",
                    "performs",
                    "custom",
                    "prompts",
                    "exits",
                    "/",
                    "using",
                    "code",
                    "Calc",
                    "based",
                    "result",
                    "processes",
                    "implements",
                    "equation",
                    "reads",
                    "q",
                    "program",
                    "operator",
                    "quit",
                    "written",
                    ">",
                    "q\\",
                    ":add",
                    "f64",
                    "\\",
                    "vec",
                    ".expect",
                    "Rust",
                    "input",
                    "break",
                    "Welcome",
                    "read",
                    "+",
                    "continue",
                    "std",
                    "subtraction",
                    ".ok",
                    "input.split",
                    "io",
                    "built",
                    ":new",
                    "parts",
                    "]",
                    "calculator",
                    "+=",
                    "mut",
                    "mod",
                    "==",
                    ":stdin",
                    "division",
                    "let",
                    "str",
                    ".trim",
                    "/",
                    "input.find",
                    "using",
                    "valid_operators",
                    "panic",
                    "Failed",
                    "Enter",
                    "supported",
                    "Calc",
                    "=",
                    "match",
                    ":io",
                    "Thanks",
                    "*",
                    "parts.len",
                    "number",
                    ":mul",
                    "Vec",
                    ":div",
                    "equation",
                    "Invalid",
                    "_",
                    "println",
                    ".collect",
                    "None",
                    "counter",
                    "<",
                    ":sub",
                    "addition",
                    ".read_line",
                    "program",
                    "String",
                    "[",
                    "operator",
                    ":Calc",
                    "multiplication",
                    "calc",
                    "Please",
                    "quit",
                    "val"
                ],
                "annotation": "The code, written in Rust, implements a basic calculator. It prompts the user to input an equation or \"q\" to quit, reads the input, processes valid operators (+, -, *, /), performs calculations based on the chosen operator using a custom Calc struct, and prints the result. If the input is \"q\", the program exits.",
                "content": "mod calc;\nuse calc::Calc;\nuse std::io;\n\nfn main() {\n    println!(\"Welcome to the a basic calculator built with Rust.\");\n\n    loop {\n        println!(\"Please enter an equation or \\\"q\\\" to quit: \");\n\n        let mut input = String::new();\n        io::stdin()\n            .read_line(&mut input)\n            .expect(\"Failed to read input\");\n\n        if input.trim() == \"q\" {\n            println!(\"Thanks for using this program.\");\n            break;\n        }\n\n        let valid_operators = vec![\"+\", \"-\", \"*\", \"/\"];\n\n        for operator in valid_operators {\n            match input.find(operator) {\n                Some(_) => {\n                    let parts: Vec<&str> = input.split(operator).collect();\n\n                    if parts.len() < 2 {\n                        panic!(\"Invalid equation.\");\n                    }\n\n                    let mut number_array = vec![];\n                    let mut counter = 0;\n\n                    while counter != parts.len() {\n                        let val: f64 = parts[counter].trim().parse().ok().expect(\"Enter a number.\");\n                        number_array.push(val);\n                        counter += 1;\n                    }\n\n                    match operator {\n                        \"+\" => println!(\"{}\", Calc::add(number_array)),\n                        \"-\" => println!(\"{}\", Calc::sub(number_array)),\n                        \"*\" => println!(\"{}\", Calc::mul(number_array)),\n                        \"/\" => println!(\"{}\", Calc::div(number_array)),\n                        _ => println!(\"Only addition, subtraction, multiplication and division are supported.\")\n                    }\n                }\n\n                None => {\n                    continue;\n                }\n            }\n        }\n    }\n}\n",
                "link": "https://github.com/TravHaran/rust-calculator/blob/master/src/main.rs"
            },
            "highlights": "The code, written in Rust, implements a basic calculator. It prompts the user to input an equation or \"q\" to quit, reads the input, processes valid operators (+, -, *, /), performs calculations based on the chosen operator using a custom Calc struct, and prints the result. If the input is \"q\", the program exits."
        }
    ]
}