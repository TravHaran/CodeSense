{
    "name": "TravHaran/rust-calculator",
    "path": "rust-calculator/",
    "type": "folder",
    "keywords": [],
    "children": [
        {
            "name": "Cargo.lock",
            "path": "rust-calculator/Cargo.lock",
            "type": "file",
            "keywords": [
                "manager",
                "package",
                "exact",
                "record",
                "dependencies",
                "packages",
                "checksum",
                "file",
                "used",
                "calc",
                "depends",
                "versions",
                "Rust",
                "version",
                "generated",
                "code",
                "ensures",
                "provides",
                "ensuring",
                "snippet",
                "lists",
                "Cargo.lock",
                "itertools",
                "builds",
                "reproducibility",
                "verification",
                "Cargo",
                "project",
                "package",
                "dependencies",
                "name",
                "checksum",
                "file",
                "registry+https",
                "intended",
                "calc",
                "version",
                "source",
                "generated",
                "=",
                "editing",
                "Cargo.",
                "]",
                "itertools",
                "[",
                "//github.com/rust-lang/crates.io-index",
                "@"
            ],
            "annotation": "The code is a snippet from a Rust project's Cargo.lock file, which is automatically generated by Cargo, Rust's package manager. It provides a detailed record of the exact dependencies and their versions used in the project, ensuring reproducibility. The file lists three packages: calc (version 0.1.0) which depends on itertools; either (version 1.6.1) with its checksum for verification; and itertools (version 0.10.0) that also depends on either. The file ensures that these dependencies are consistently used across different builds of the project.",
            "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\n[[package]]\nname = \"calc\"\nversion = \"0.1.0\"\ndependencies = [\n \"itertools\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457\"\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37d572918e350e82412fe766d24b15e6682fb2ed2bbe018280caa810397cb319\"\ndependencies = [\n \"either\",\n]\n",
            "link": "https://github.com/TravHaran/rust-calculator/blob/master/Cargo.lock"
        },
        {
            "name": "Cargo.toml",
            "path": "rust-calculator/Cargo.toml",
            "type": "file",
            "keywords": [
                "Obvious",
                "edition",
                "configurations",
                "manager",
                "package",
                "dependencies",
                "specifies",
                "file",
                "uses",
                "calc",
                "TOML",
                "authored",
                "specified",
                "Rust",
                "format",
                "metadata",
                "version",
                "code",
                "helps",
                "Tom",
                "build",
                "named",
                "lists",
                "]",
                "Cargo.toml",
                "Boisdequin",
                "written",
                "[",
                "crate",
                "Language",
                "Cargo",
                "Minimal",
                "manage",
                "Henry",
                "project",
                "required",
                "edition",
                "https",
                "package",
                "dependencies",
                "name",
                "<",
                "definitions",
                "calc",
                "version",
                "=",
                "keys",
                "]",
                "itertools",
                "Boisdequin",
                "[",
                "@",
                ">",
                "See",
                "Henry",
                "authors"
            ],
            "annotation": "The code is a manifest file written in TOML (Tom's Obvious, Minimal Language) format for a Rust project. This file, typically named Cargo.toml, specifies the package metadata for the Rust project named \"calc\" with version \"0.1.0\" and authored by Henry Boisdequin. The project uses the 2018 edition of Rust. Under [dependencies], it lists dependencies required by the project, specifically the itertools crate version \"0.10\". This file helps Rust's package manager, Cargo, manage and build the project with the specified configurations and dependencies.",
            "content": "[package]\nname = \"calc\"\nversion = \"0.1.0\"\nauthors = [\"Henry Boisdequin <65845077+henryboisdequin@users.noreply.github.com>\"]\nedition = \"2018\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nitertools = \"0.10\"\n",
            "link": "https://github.com/TravHaran/rust-calculator/blob/master/Cargo.toml"
        },
        {
            "name": "README.md",
            "path": "rust-calculator/README.md",
            "type": "file",
            "keywords": [
                "installed",
                "cargo",
                "repository",
                "manager",
                "package",
                "tests",
                "testing",
                "program",
                "directory",
                "description",
                "detail",
                "Rust",
                "run",
                "code",
                "clone",
                "explanation",
                "steps",
                "implies",
                "functionalities",
                "user",
                "implemented",
                "calculator",
                "contains",
                "execute",
                "Cargo",
                "test",
                "running",
                "outlines",
                "project",
                "ensure",
                "directory",
                "Make",
                "cargo",
                "calculator",
                "installed3",
                "Rust",
                "test",
                "repository2",
                "Cd",
                "type",
                "run",
                "Rust.",
                "project",
                "Run1",
                "Clone"
            ],
            "annotation": "This description outlines steps for running a simple command-line calculator implemented in Rust. To execute the program, the user should clone the repository, ensure Rust and its package manager Cargo are installed, navigate to the project's directory, and run the program with cargo run. For testing the code, the user should execute cargo test. The explanation implies that the repository contains code for a calculator and associated tests, though it does not detail the code itself or the functionalities of the calculator.",
            "content": "Simple command-line calculator in Rust.\n\n## To Run\n\n1. Clone this repository\n\n2. Make sure you have Rust and cargo installed\n\n3. Cd into the project directory and type `cargo run`\n\n4. To test: run `cargo test`\n",
            "link": "https://github.com/TravHaran/rust-calculator/blob/master/README.md"
        },
        {
            "name": "src",
            "path": "rust-calculator/src",
            "type": "folder",
            "keywords": [],
            "children": [
                {
                    "name": "calc.rs",
                    "path": "rust-calculator/src/calc.rs",
                    "type": "file",
                    "keywords": [
                        "add",
                        "method",
                        "numbers",
                        "calculates",
                        "sub",
                        "provided",
                        ":Itertools",
                        "performing",
                        "verify",
                        "results",
                        "addition",
                        "div",
                        "used",
                        "fold1",
                        "runs",
                        "Rust",
                        "sums",
                        "vectors",
                        "elements",
                        "element",
                        "code",
                        "applies",
                        "structure",
                        "binary",
                        "performs",
                        "test_all_operations",
                        "Calc",
                        "expected",
                        "multiplication",
                        "function",
                        "product",
                        "subtraction",
                        "operations",
                        "itertools",
                        "written",
                        "crate",
                        "subtracts",
                        "assertions",
                        "test",
                        "defines",
                        "methods",
                        "division",
                        "mul",
                        "Div",
                        "add",
                        "sub",
                        ":div",
                        ".to_vec",
                        ":Itertools",
                        "<",
                        ".fold1",
                        "use",
                        "struct",
                        "fn",
                        "addition",
                        "arr.iter",
                        "f64",
                        "x",
                        "div",
                        "-3.0",
                        "assert_eq",
                        ":mul",
                        ".map",
                        ":ops",
                        "pub",
                        "-6.0",
                        "test_all_operations",
                        "Calc",
                        "multiplication",
                        "|",
                        "Sub",
                        "subtraction",
                        ".sum",
                        "x|",
                        "]",
                        "itertools",
                        "std",
                        "arr",
                        ":sub",
                        ":add",
                        "test",
                        ".product",
                        "Vec",
                        ">",
                        "division",
                        "mul",
                        ".unwrap_or"
                    ],
                    "annotation": "The code is written in Rust and defines a structure Calc with static methods for performing basic arithmetic operations on vectors of floating-point numbers: addition, subtraction, multiplication, and division. The add function sums all elements, sub subtracts each subsequent element from the previous one, mul calculates the product of all elements, and div performs sequential division of the elements. The itertools::Itertools crate is used for its fold1 method, which applies binary operations sequentially. The provided test function test_all_operations runs several assertions to verify the correctness of these operations with expected results for various vectors.",
                    "content": "use itertools::Itertools;\nuse std::ops::{Div, Sub};\n\npub struct Calc;\n\nimpl Calc {\n    pub fn add(arr: Vec<f64>) -> f64 {\n        arr.iter().sum::<f64>()\n    }\n\n    pub fn sub(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Sub::sub).unwrap_or(0.0)\n    }\n\n    pub fn mul(arr: Vec<f64>) -> f64 {\n        arr.iter().product()\n    }\n\n    pub fn div(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Div::div).unwrap_or(0.0)\n    }\n}\n\n#[test]\nfn test_all_operations() {\n    // addition\n    assert_eq!(Calc::add([2.0, 4.0, 6.0].to_vec()), 12.0);\n    assert_eq!(Calc::add([-6.0, 5.0, 10.0].to_vec()), 9.0);\n\n    // subtraction\n    assert_eq!(Calc::sub([10.0, 4.0, 6.0].to_vec()), 0.0);\n    assert_eq!(Calc::sub([100.0, 10.0, 19.0].to_vec()), 71.0);\n\n    // multiplication\n    assert_eq!(Calc::mul([10.0, 10.0, 2.0].to_vec()), 200.0);\n    assert_eq!(Calc::mul([-3.0, 2.0].to_vec()), -6.0);\n\n    // division\n    assert_eq!(Calc::div([54.0, 2.0, 3.0].to_vec()), 9.0);\n    assert_eq!(Calc::div([4.0, 2.0, 5.0].to_vec()), 0.4);\n}\n",
                    "link": "https://github.com/TravHaran/rust-calculator/blob/master/src/calc.rs"
                },
                {
                    "name": "main.rs",
                    "path": "rust-calculator/src/main.rs",
                    "type": "file",
                    "keywords": [
                        "based",
                        "q",
                        "/",
                        "numbers",
                        "using",
                        "valid",
                        "performing",
                        "equations",
                        "program",
                        "printed",
                        "parses",
                        "*",
                        "depends",
                        "Rust",
                        "input",
                        "implements",
                        "exits",
                        "code",
                        "operation",
                        "module",
                        "output",
                        "message",
                        "performs",
                        "expected",
                        "+",
                        "Calc",
                        "reads",
                        "operators",
                        "computation",
                        "corresponding",
                        "user",
                        "displaying",
                        "prompts",
                        "checks",
                        "calculator",
                        "equation",
                        "result",
                        "inputs",
                        "methods",
                        "quit",
                        "splits",
                        "/",
                        "let",
                        "counter",
                        "panic",
                        "using",
                        ":div",
                        "<",
                        "Invalid",
                        "Enter",
                        ".ok",
                        ".read_line",
                        ".expect",
                        "input.find",
                        "println",
                        "io",
                        "mod",
                        "program",
                        ":new",
                        "vec",
                        "f64",
                        "addition",
                        "calc",
                        "*",
                        ".trim",
                        "match",
                        ":mul",
                        "parts",
                        "Rust",
                        "Please",
                        "input",
                        ".collect",
                        ":Calc",
                        "Thanks",
                        "break",
                        "String",
                        "mut",
                        "parts.len",
                        "+",
                        "Calc",
                        "input.split",
                        "multiplication",
                        "valid_operators",
                        "=",
                        ":io",
                        "str",
                        "+=",
                        "subtraction",
                        "operator",
                        "]",
                        "_",
                        "built",
                        "calculator",
                        "equation",
                        ":stdin",
                        "std",
                        "[",
                        "Failed",
                        "val",
                        "read",
                        "Welcome",
                        ":sub",
                        "supported",
                        "q\\",
                        "==",
                        ":add",
                        "Vec",
                        "None",
                        ">",
                        "\\",
                        "division",
                        "number",
                        "quit",
                        "continue"
                    ],
                    "annotation": "This Rust code implements a basic command-line calculator. It repeatedly prompts the user to input an equation or \"q\" to quit. The code reads the input, checks for valid operators (\"+\", \"-\", \"*\", \"/\"), and splits the input based on these operators. It then parses the input into numbers and performs the corresponding arithmetic operation using methods from a Calc module. The result of the computation is printed. If the user inputs \"q\", the program exits with a thank-you message. The expected output depends on the user's input, performing and displaying the arithmetic result for valid equations.",
                    "content": "mod calc;\nuse calc::Calc;\nuse std::io;\n\nfn main() {\n    println!(\"Welcome to the a basic calculator built with Rust.\");\n\n    loop {\n        println!(\"Please enter an equation or \\\"q\\\" to quit: \");\n\n        let mut input = String::new();\n        io::stdin()\n            .read_line(&mut input)\n            .expect(\"Failed to read input\");\n\n        if input.trim() == \"q\" {\n            println!(\"Thanks for using this program.\");\n            break;\n        }\n\n        let valid_operators = vec![\"+\", \"-\", \"*\", \"/\"];\n\n        for operator in valid_operators {\n            match input.find(operator) {\n                Some(_) => {\n                    let parts: Vec<&str> = input.split(operator).collect();\n\n                    if parts.len() < 2 {\n                        panic!(\"Invalid equation.\");\n                    }\n\n                    let mut number_array = vec![];\n                    let mut counter = 0;\n\n                    while counter != parts.len() {\n                        let val: f64 = parts[counter].trim().parse().ok().expect(\"Enter a number.\");\n                        number_array.push(val);\n                        counter += 1;\n                    }\n\n                    match operator {\n                        \"+\" => println!(\"{}\", Calc::add(number_array)),\n                        \"-\" => println!(\"{}\", Calc::sub(number_array)),\n                        \"*\" => println!(\"{}\", Calc::mul(number_array)),\n                        \"/\" => println!(\"{}\", Calc::div(number_array)),\n                        _ => println!(\"Only addition, subtraction, multiplication and division are supported.\")\n                    }\n                }\n\n                None => {\n                    continue;\n                }\n            }\n        }\n    }\n}\n",
                    "link": "https://github.com/TravHaran/rust-calculator/blob/master/src/main.rs"
                }
            ]
        }
    ]
}