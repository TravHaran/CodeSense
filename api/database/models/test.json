{
    "name": "rust-calculator",
    "path": "rust-calculator/",
    "type": "folder",
    "keywords": [],
    "children": [
        {
            "name": "Cargo.lock",
            "path": "rust-calculator/Cargo.lock",
            "type": "file",
            "keywords": [
                "lists",
                "ensures",
                "ensure",
                "used",
                "track",
                "represents",
                "calc",
                "relying",
                "Dependencies",
                "code",
                "snippet",
                "sources",
                "project",
                "integrity",
                "time",
                "checksums",
                "itertools",
                "packages",
                "included",
                "version",
                "generated",
                "reproducibility",
                "built",
                "package",
                "file",
                "Rust",
                "noted",
                "dependencies",
                "versions"
            ],
            "annotation": "This code snippet represents a generated `Cargo.lock` file for a Rust project, used to track the specific versions of dependencies for reproducibility. It lists packages included in the project, such as `calc` version 0.1.0, `either` version 1.6.1, and `itertools` version 0.10.0, along with their sources and checksums to ensure integrity. Dependencies of each package, like `itertools` relying on `either`, are also noted. The file ensures that the same versions of dependencies are used each time the project is built.",
            "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\n[[package]]\nname = \"calc\"\nversion = \"0.1.0\"\ndependencies = [\n \"itertools\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457\"\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37d572918e350e82412fe766d24b15e6682fb2ed2bbe018280caa810397cb319\"\ndependencies = [\n \"either\",\n]\n"
        },
        {
            "name": "Cargo.toml",
            "path": "rust-calculator/Cargo.toml",
            "type": "file",
            "keywords": [
                "lists",
                "crate",
                "dependency",
                "expected",
                "Cargo",
                "Cargo.toml",
                "authored",
                "uses",
                "defines",
                "calc",
                "code",
                "Henry",
                "manage",
                "project",
                "named",
                "metadata",
                "manager",
                "settings",
                "configuration",
                "itertools",
                "TOML",
                "version",
                "Boisdequin",
                "package",
                "file",
                "output",
                "edition",
                "help",
                "Rust",
                "dependencies"
            ],
            "annotation": "The code is a TOML configuration for a Rust project, specifically a `Cargo.toml` file. This file defines metadata and dependencies for the Rust package. The package is named \"calc\", version \"0.1.0\", authored by Henry Boisdequin, and uses the 2018 edition of Rust. It lists one dependency, the \"itertools\" crate, at version \"0.10\". This configuration will help Rust's package manager, Cargo, manage the project's dependencies and settings. No direct output is expected from this file.",
            "content": "[package]\nname = \"calc\"\nversion = \"0.1.0\"\nauthors = [\"Henry Boisdequin <65845077+henryboisdequin@users.noreply.github.com>\"]\nedition = \"2018\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nitertools = \"0.10\"\n"
        },
        {
            "name": "README.md",
            "path": "rust-calculator/README.md",
            "type": "file",
            "keywords": [
                "installed",
                "steps",
                "ensure",
                "Cargo",
                "provided",
                "include",
                "outlines",
                "code",
                "run",
                "project",
                "user",
                "set",
                "test",
                "directory",
                "program",
                "calculator",
                "instructions",
                "repository",
                "testing",
                "command",
                "navigate",
                "provides",
                "using",
                "written",
                "clone",
                "cargo",
                "Rust",
                "verify",
                "used",
                "instructs"
            ],
            "annotation": "The provided text outlines the steps to run and test a simple command-line calculator project written in Rust. It instructs the user to clone the repository, ensure Rust and Cargo are installed, navigate to the project directory, and execute the program using `cargo run`. For testing, the command `cargo test` should be used. This guide-type text does not include the actual Rust code but provides a developer with instructions to set up and verify the project.",
            "content": "Simple command-line calculator in Rust.\n\n## To Run\n\n1. Clone this repository\n\n2. Make sure you have Rust and cargo installed\n\n3. Cd into the project directory and type `cargo run`\n\n4. To test: run `cargo test`\n"
        },
        {
            "name": "src",
            "path": "rust-calculator/src",
            "type": "folder",
            "keywords": [],
            "children": [
                {
                    "name": "calc.rs",
                    "path": "rust-calculator/src/calc.rs",
                    "type": "file",
                    "keywords": [
                        "numbers",
                        "value",
                        "expected",
                        "Calc",
                        "methods",
                        "struct",
                        "vectors",
                        "subtracts",
                        "sub",
                        "defines",
                        "uses",
                        "assertions",
                        "code",
                        "validated",
                        "statements",
                        "ensuring",
                        "functionality",
                        "div",
                        "method",
                        "elements",
                        "produce",
                        "test",
                        "process",
                        "correctness",
                        "printed",
                        "vector",
                        "mul",
                        "operations",
                        "function",
                        "checks",
                        "using",
                        "written",
                        "output",
                        "multiplies",
                        "Rust",
                        "test_all_operations",
                        "Expected",
                        "results"
                    ],
                    "annotation": "The code is written in Rust and defines a `Calc` struct with methods for basic arithmetic operations on vectors of floating-point numbers (`f64`). The `add` method sums all elements, `sub` method subtracts elements from an initial value, `mul` multiplies all elements, and `div` divides elements sequentially. Each method uses iterator functionality to process the vector. The test function `test_all_operations` checks the correctness of these arithmetic methods using assert statements. Expected output is not printed but validated internally through assertions, ensuring all operations produce the expected results.",
                    "content": "use itertools::Itertools;\nuse std::ops::{Div, Sub};\n\npub struct Calc;\n\nimpl Calc {\n    pub fn add(arr: Vec<f64>) -> f64 {\n        arr.iter().sum::<f64>()\n    }\n\n    pub fn sub(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Sub::sub).unwrap_or(0.0)\n    }\n\n    pub fn mul(arr: Vec<f64>) -> f64 {\n        arr.iter().product()\n    }\n\n    pub fn div(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Div::div).unwrap_or(0.0)\n    }\n}\n\n#[test]\nfn test_all_operations() {\n    // addition\n    assert_eq!(Calc::add([2.0, 4.0, 6.0].to_vec()), 12.0);\n    assert_eq!(Calc::add([-6.0, 5.0, 10.0].to_vec()), 9.0);\n\n    // subtraction\n    assert_eq!(Calc::sub([10.0, 4.0, 6.0].to_vec()), 0.0);\n    assert_eq!(Calc::sub([100.0, 10.0, 19.0].to_vec()), 71.0);\n\n    // multiplication\n    assert_eq!(Calc::mul([10.0, 10.0, 2.0].to_vec()), 200.0);\n    assert_eq!(Calc::mul([-3.0, 2.0].to_vec()), -6.0);\n\n    // division\n    assert_eq!(Calc::div([54.0, 2.0, 3.0].to_vec()), 9.0);\n    assert_eq!(Calc::div([4.0, 2.0, 5.0].to_vec()), 0.4);\n}\n"
                },
                {
                    "name": "main.rs",
                    "path": "rust-calculator/src/main.rs",
                    "type": "file",
                    "keywords": [
                        "implements",
                        "numbers",
                        "operators",
                        "Calc",
                        "calculation",
                        "methods",
                        "sub",
                        "equation",
                        "performs",
                        "/",
                        "ensuring",
                        "div",
                        "q",
                        "converts",
                        "module",
                        "prompts",
                        "handles",
                        "errors",
                        "input",
                        "parts",
                        "operator",
                        "program",
                        "message",
                        "exits",
                        "calculator",
                        "found",
                        "enters",
                        "reading",
                        "validity",
                        "mul",
                        "add",
                        "corresponding",
                        "checks",
                        "quit",
                        "contains",
                        "splits",
                        "using",
                        "+"
                    ],
                    "annotation": "This Rust program implements a basic command-line calculator. It continuously prompts the user to enter a mathematical equation or \"q\" to quit. The program checks if the input contains one of the basic arithmetic operators (+, -, *, /). If an operator is found, it splits the input into parts, converts them to numbers, and performs the corresponding calculation using the `Calc` module's methods (`add`, `sub`, `mul`, `div`). If the user enters \"q\", the program exits with a thank you message. The program handles input reading errors and non-numeric parts gracefully, ensuring input validity.",
                    "content": "mod calc;\nuse calc::Calc;\nuse std::io;\n\nfn main() {\n    println!(\"Welcome to the a basic calculator built with Rust.\");\n\n    loop {\n        println!(\"Please enter an equation or \\\"q\\\" to quit: \");\n\n        let mut input = String::new();\n        io::stdin()\n            .read_line(&mut input)\n            .expect(\"Failed to read input\");\n\n        if input.trim() == \"q\" {\n            println!(\"Thanks for using this program.\");\n            break;\n        }\n\n        let valid_operators = vec![\"+\", \"-\", \"*\", \"/\"];\n\n        for operator in valid_operators {\n            match input.find(operator) {\n                Some(_) => {\n                    let parts: Vec<&str> = input.split(operator).collect();\n\n                    if parts.len() < 2 {\n                        panic!(\"Invalid equation.\");\n                    }\n\n                    let mut number_array = vec![];\n                    let mut counter = 0;\n\n                    while counter != parts.len() {\n                        let val: f64 = parts[counter].trim().parse().ok().expect(\"Enter a number.\");\n                        number_array.push(val);\n                        counter += 1;\n                    }\n\n                    match operator {\n                        \"+\" => println!(\"{}\", Calc::add(number_array)),\n                        \"-\" => println!(\"{}\", Calc::sub(number_array)),\n                        \"*\" => println!(\"{}\", Calc::mul(number_array)),\n                        \"/\" => println!(\"{}\", Calc::div(number_array)),\n                        _ => println!(\"Only addition, subtraction, multiplication and division are supported.\")\n                    }\n                }\n\n                None => {\n                    continue;\n                }\n            }\n        }\n    }\n}\n"
                }
            ]
        }
    ]
}