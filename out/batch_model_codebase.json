{
    "results": [
        {
            "name": "",
            "type": "folder",
            "keywords": [],
            "children": [
                {
                    "name": "README.md",
                    "type": "file",
                    "keywords": [],
                    "annotation": "",
                    "content": "# Basic-Calc-in-multiple-languages \n\n### Features:\n1. Addition + - Addition of N Numbers.\n2. Subtraction - - Subtraction of N Numbers.\n3. Multipication * - Multipication of Two Numbers.\n4. Division / - Division of two Numbers.\n5. Modulus % - Modulus of Two Numbers.\n6. Hypotenuse - Find Any Triangle's Hypotenuse.\n7. Power of a Number - Find any Number Power using Base and Exponenent.\n8. Random Number - Generate any Random Number.\n9. Converter - Celcius to Fahrenheit and Fahrenheit to Celcius Converter.\n10. Armstrong Number - You can Find any number is the sum of cubes of each digit is equal to the number itself or Not i.e., Armstrong Number.\n11. Reverse a Number - Reverse any Number.\n12. Circle - To Find Radius, Diameter, Circumference and Area.\n13. Rectangle - To Find Area, Diagonal, Perimeter, Length and Width.\n14. Tables - You can Get any Table of any Number.\n15. Matrices - Addition, Subtraction, Multipication of two Matrices and Transpose of a Matrix.\n\nMore Features will be uploaded soon.\n\n\nMore Language Programs will be uploaded soon\n"
                },
                {
                    "name": "calc.java",
                    "type": "file",
                    "keywords": [
                        "generation",
                        "calculation",
                        "Based",
                        "sum",
                        "division",
                        "structure",
                        "temperature",
                        "addition",
                        "reversal",
                        "message",
                        "output",
                        "conversion",
                        "selected",
                        "Visiting",
                        "exits",
                        "user",
                        "Thank",
                        "numbers",
                        "multiplication",
                        "implements",
                        "uses",
                        "calculator",
                        "computation",
                        "option",
                        "program",
                        "input",
                        "displays",
                        "Armstrong",
                        "check",
                        "operations",
                        "number",
                        "subtraction",
                        "performs",
                        "entering",
                        "chosen",
                        "matrix",
                        "offer",
                        "operation",
                        "result",
                        "Java",
                        "selecting",
                        "hypotenuse",
                        "example",
                        "exponentiation",
                        "code",
                        "calculations"
                    ],
                    "annotation": "This Java code implements a multi-functional calculator program. The program uses a while loop and switch-case structure to repeatedly offer a menu of 16 operations, such as addition, subtraction, multiplication, division, modulus calculation, computation of hypotenuse, exponentiation, random number generation, temperature conversion, Armstrong number check, number reversal, and various geometric and matrix calculations. Based on user input, it performs the selected operation and displays the result. For example, selecting \"1\" and entering numbers will output their sum. The program exits gracefully with a \"Thank You For Visiting\" message when option \"16\" is chosen.",
                    "content": "import java.util.*;\n\npublic class calc {\n    public static void main(String[] args){\n        double a, b, c = 0, e = 0, x, y, z;\n        int d, numS;\n        Scanner calc = new Scanner(System.in);\n        System.out.print(\"\\033[H\\033[2J\");\n        while(e == 0){\n            System.out.println(\"\\n1. Addition + \\n2. Subtraction - \\n3. Multipication * \\n4. Division / \\n5. Modulus % \\n6. Hypotenuse \\n7. Power of a Number \\n8. Random Number \\n9. Converter \\n10. Armstrong Number \\n11. Reverse a Number \\n12. Circle \\n13. Rectangle \\n14. Tables \\n15. Matrices \\n16. Exit \\nEnter Your Choice: \\n\");\n        d = calc.nextInt();\n        switch(d){\n            case 1:\n                System.out.print(\"\\033[H\\033[2J\");  \n                System.out.println(\"\\nAddition\\n\");\n                System.out.println(\"Enter How many Numbers you want to SUM: \\n\");\n                numS = calc.nextInt();\n                System.out.println(\"Enter the \" + numS + \" Numbers: \\n\");\n                for(int i = 1; i <= numS; i++){\n                    System.out.println(\"Enter Number \" + (i) + \" : \\n\");\n                    a = calc.nextDouble();\n                    c += a;\n                }\n                System.out.println(\"\\nThe Sum of \" + numS + \" Numbers is \" + c );\n                break;\n            case 2:\n                System.out.print(\"\\033[H\\033[2J\");  \n                System.out.println(\"\\nSubtraction\\n\");\n                System.out.println(\"Enter How many Numbers you want to Substract: \\n\");\n                numS = calc.nextInt();\n                System.out.println(\"Enter Number 1: \\n\");\n                c = calc.nextDouble();\n                System.out.println(\"Enter the \" + numS + \" Numbers: \\n\");\n                for(int i = 2; i <= numS; i++){\n                    System.out.println(\"Enter Number \" + (i) + \" : \\n\");\n                    a = calc.nextDouble();\n                    c -= a;\n                }\n                System.out.println(\"\\nThe Difference of \" + numS + \" Numbers is \" + c );\n                break;\n            case 3:\n                System.out.print(\"\\033[H\\033[2J\");  \n                System.out.println(\"\\nMultipication\\n\");\n                System.out.println(\"Enter First Number: \\n\");\n                a = calc.nextDouble();\n                System.out.println(\"Enter Second Number: \\n\");\n                b = calc.nextDouble();\n                c = a * b;\n                System.out.println(\"\\nThe Combination of \" + a + \" and \" + b + \" is \" + c );\n                break;\n            case 4:\n                System.out.print(\"\\033[H\\033[2J\");  \n                System.out.println(\"\\nDivision\\n\");\n                System.out.println(\"Enter First Number: \\n\");\n                a = calc.nextDouble();\n                System.out.println(\"Enter Second Number: \\n\");\n                b = calc.nextDouble();\n                c = a / b;\n                System.out.println(\"\\nThe Divison of \" + a + \" and \" + b + \" is \" + c );\n                break;\n            case 5:\n                System.out.print(\"\\033[H\\033[2J\");  \n                System.out.println(\"\\nModulus\\n\");\n                System.out.println(\"Enter First Number: \\n\");\n                a = calc.nextDouble();\n                System.out.println(\"Enter Second Number: \\n\");\n                b = calc.nextDouble();\n                c = a % b;\n                System.out.println(\"\\nThe Modulus of \" + a + \" and \" + b + \" is \" + c );\n                break;\n            case 6:\n                System.out.print(\"\\033[H\\033[2J\");\n                System.out.println(\"Enter side x: \");\n                x  = calc.nextDouble();\n                System.out.println(\"\\nEnter side y: \");\n                y = calc.nextDouble();\n                z = Math.sqrt((x * x) + (y * y));\n                System.out.println(\"The Hypotenuse is \" + z);\n                break;\n            case 7:\n                System.out.print(\"\\033[H\\033[2J\");\n                Scanner pow = new Scanner(System.in);\n                int base, exp, oexp, result = 1;\n                System.out.println(\"Enter Base Number: \");\n                base = pow.nextInt();\n                System.out.println(\"Enter an Exponent: \");\n                exp = pow.nextInt();\n                oexp = exp;\n                while(exp != 0){\n                    result *= base;\n                    --exp;\n                }\n                System.out.println(\"The Power of \" + base + \" Raised to \" + oexp + \" is \" + result);\n                break;\n            case 8:\n                System.out.print(\"\\033[H\\033[2J\");\n                int min, max;\n                Scanner randN = new Scanner(System.in);\n                System.out.println(\"Enter the min number: \");\n                min  = randN.nextInt();\n                System.out.println(\"Enter the max number: \");\n                max = randN.nextInt();\n                int randNumber = (int)(Math.random() * (max - min + 1) + min);\n                System.out.println(\"Random Number Between \" + min + \" to \" + max + \" is \" + randNumber);\n                break;\n            case 9:\n                System.out.print(\"\\033[H\\033[2J\");\n                double f, cel; \n                int option;\n                Scanner con = new Scanner(System.in);\n                System.out.println(\"1. Celsius to Fahrenheit \\n2. Fahrenheit to Celsius \\nEnter Your Choice: \");\n                option = con.nextInt();\n                switch(option){\n                    case 1:\n                        System.out.println(\"Enter Temperature in Celsius: \");\n                        cel = con.nextDouble();\n                        f = (cel * 9/5) + 32;\n                        System.out.println(\"The Temperature of \" + cel + \" Celsius in Fahrenheit is: \" + f);\n                        break;\n                    case 2:\n                        System.out.println(\"Enter Temperature in Fahrenheit: \");\n                        f = con.nextDouble();\n                        cel = (f - 32) * 5/9;\n                        System.out.println(\"The Temperature of \" + f + \" Fahrenheit in Celsius is: \" + cel);\n                        break;\n                }\n                break;\n            case 10:\n                System.out.print(\"\\033[H\\033[2J\");\n                int ce = 0, ae, temp, n;\n                Scanner num = new Scanner(System.in);\n                System.out.print(\"Enter number to be checked: \");\n                n = num.nextInt();\n                temp = n;\n                while(n > 0){\n                    ae = n % 10;\n                    n = n/10;\n                    ce = ce+(ae*ae*ae);\n                }\n                if(temp == ce){\n                    System.out.println(temp+\" is an Armstrong Number.\");\n                }else{\n                    System.out.println(temp+\" is not an Armstrong Number.\");\n                }\n                break;\n            case 11:\n                System.out.print(\"\\033[H\\033[2J\");\n                Scanner revNum = new Scanner(System.in);\n                int rnum, rev = 0, remainder;\n                System.out.println(\"Enter an Integer: \");\n                rnum = revNum.nextInt();\n                while(rnum != 0){\n                    remainder = rnum % 10;\n                    rev = rev * 10 + remainder;\n                    rnum /= 10;\n                }\n                System.out.println(\"Reversed Number of \" + rnum + \" is \" + rev);\n                break;\n            case 12:\n                System.out.print(\"\\033[H\\033[2J\");\n                Scanner circle = new Scanner(System.in);\n                double radius, circumference, area, diameter;\n                int choice;\n                System.out.println(\"Circle\\n1. Radius \\n2. Diameter \\n3. Circumference \\n4. Area \\nEnter Your Choice: \");\n                choice = circle.nextInt();\n                switch(choice){\n                    case 1:\n                        System.out.println(\"Enter Circumference of Circle: \");\n                        circumference = circle.nextDouble();\n                        radius = circumference/(2 * 3.14);\n                        System.out.println(\"Radius of Circumference \" + circumference + \" = \" + radius);\n                        break;\n                    case 2:\n                        System.out.println(\"Enter Radius of Circle: \");\n                        radius = circle.nextDouble();\n                        diameter = 2 * radius;\n                        System.out.println(\"The Diameter of radius \" + radius + \" Circle = \" + diameter);\n                        break;\n                    case 3:\n                        System.out.println(\"Enter Radius of Circle: \");\n                        radius = circle.nextDouble();\n                        circumference = 2 * 3.14 * radius;\n                        System.out.println(\"The Circumference of Radius \" + radius + \" Circle = \" + circumference);\n                        break;\n                    case 4:\n                        System.out.println(\"Enter Radius of Circle: \");\n                        radius = circle.nextDouble();\n                        area = 3.14 * radius * radius;\n                        System.out.println(\"The Area of Radius \" + radius + \" Circle = \" + area);\n                        break;\n                }\n                break;\n            case 13:\n                System.out.print(\"\\033[H\\033[2J\");\n                double length, width, rectangleArea, perimeter, diagonal;\n                int option1;\n                Scanner rectangle = new Scanner(System.in);\n                System.out.println(\"Rectangle\\n1. Area \\n2. Diagonal \\n3. Perimeter \\n4. Length \\n5. Width \\nEnter Your Choice: \");\n                option1 = rectangle.nextInt();\n                switch(option1){\n                    case 1:\n                        System.out.println(\"Enter Length of the Rectangle: \");\n                        length = rectangle.nextDouble();\n                        System.out.println(\"Enter Width of the Rectangle: \");\n                        width = rectangle.nextDouble();\n                        rectangleArea = length * width;\n                        System.out.println(\"The Area of the Rectangle \" + length + \" Length \" + width + \" Width is \" + rectangleArea);\n                        break;\n                    case 2:\n                        System.out.println(\"Enter Length of the Rectangle: \");\n                        length = rectangle.nextDouble();\n                        System.out.println(\"Enter Width of the Rectangle: \");\n                        width = rectangle.nextDouble();\n                        diagonal = Math.sqrt((length * length) + (width * width));\n                        System.out.println(\"The Diagonal of the Rectangle \" + length + \" Length \" + width + \" width is \" + diagonal);\n                        break;\n                    case 3:\n                        System.out.println(\"Enter Length of the Rectangle: \");\n                        length = rectangle.nextDouble();\n                        System.out.println(\"Enter Width of the Rectangle: \");\n                        width = rectangle.nextDouble();\n                        perimeter = 2 * (length + width);\n                        System.out.println(\"The Perimeter of the Rectangle \" + length + \" Length \" + width + \" width is \" + perimeter);\n                        break;\n                    case 4:\n                        System.out.println(\"Enter Width of the Rectangle: \");\n                        width = rectangle.nextDouble();\n                        System.out.println(\"Enter Perimeter of the Rectangle: \");\n                        perimeter = rectangle.nextDouble();\n                        length = (perimeter/2) - width;\n                        System.out.println(\"The Length of Rectangle whose Perimeter = \" + perimeter + \" and Width = \" + width + \" is \" + length);\n                        break;\n                    case 5:\n                        System.out.println(\"Enter Length of the Rectangle: \");\n                        length = rectangle.nextDouble();\n                        System.out.println(\"Enter Perimeter of the Rectangle: \");\n                        perimeter = rectangle.nextDouble();\n                        width = (perimeter/2) - length;\n                        System.out.println(\"The Width of Rectangle whose Perimeter = \" + perimeter + \" and Length = \" + length + \" is \" + width);\n                        break;\n                }\n                break;\n            case 14:\n                System.out.print(\"\\033[H\\033[2J\");\n                Scanner tables = new Scanner(System.in);\n                int tNum;\n                System.out.println(\"Enter a Number Whose Table you want to see: \");\n                tNum = tables.nextInt();\n                System.out.println(\"\\n\" + tNum + \" x 1 = \" + tNum * 1 + \" \\n\");\n                System.out.println(tNum + \" x 2 = \" + tNum * 2 + \" \\n\");\n                System.out.println(tNum + \" x 3 = \" + tNum * 3 + \" \\n\");\n                System.out.println(tNum + \" x 4 = \" + tNum * 4 + \" \\n\");\n                System.out.println(tNum + \" x 5 = \" + tNum * 5 + \" \\n\");\n                System.out.println(tNum + \" x 6 = \" + tNum * 6 + \" \\n\");\n                System.out.println(tNum + \" x 7 = \" + tNum * 7 + \" \\n\");\n                System.out.println(tNum + \" x 8 = \" + tNum * 8 + \" \\n\");\n                System.out.println(tNum + \" x 9 = \" + tNum * 9 + \" \\n\");\n                System.out.println(tNum + \" x 10 = \" + tNum * 10 + \" \\n\");\n                break;\n            case 15:\n                System.out.print(\"\\033[H\\033[2J\");\n                int rows, rows1, columns, columns1, option2, i, j, k, rSum = 0;\n                int[][] matrix1 = new int[100][100], matrix2 = new int[100][100], mSum = new int[100][100];\n                Scanner matrix = new Scanner(System.in);\n                System.out.println(\"1. Addition \\n2. Subtraction \\n3. Multipication \\n4. Transpose \\nEnter Your Choice: \");\n                option2 = matrix.nextInt();\n                switch(option2){\n                    case 1:\n                        System.out.println(\"Enter Number of Rows: \");\n                        rows = matrix.nextInt();\n                        System.out.println(\"Enter Number of Columns: \");\n                        columns = matrix.nextInt();\n                        System.out.println(\"\\nEnter elements of 1st matrix: \\n\");\n                        for(i = 0; i < rows; ++i){\n                            for(j = 0; j < columns; ++j){\n                            System.out.format(\"Enter Element A%d%d: \", i + 1, j + 1);\n                            matrix1[i][j] = matrix.nextInt();\n                            }\n                        }\n                        System.out.println(\"Enter element of 2nd matrix: \");\n                        for(i = 0; i < rows; ++i){\n                            for(j = 0; j < columns; ++j){\n                                System.out.format(\"Enter Element B%d%d: \", i + 1, j + 1);\n                                matrix2[i][j] = matrix.nextInt();\n                                }\n                            }\n                        for(i = 0; i < rows; ++i){\n                            for(j = 0; j < columns; ++j){\n                                mSum[i][j] = matrix1[i][j] + matrix2[i][j];\n                            }\n                        }\n                        System.out.println(\"\\nSum of Two Matrices: \\n\");\n                        for(i = 0; i < rows; ++i){\n                            for(j = 0; j < columns; ++j){\n                                System.out.format(\"%d \", mSum[i][j]);\n                                if(j == columns - 1){\n                                    System.out.println(\"\\n\");\n                                }\n                            }\n                        }\n                break;\n                case 2:\n                    System.out.println(\"Enter Number of Rows: \");\n                    rows = matrix.nextInt();\n                    System.out.println(\"Enter Number of Columns: \");\n                    columns = matrix.nextInt();\n                    System.out.println(\"\\nEnter elements of 1st matrix: \\n\");\n                    for(i = 0; i < rows; ++i){\n                        for(j = 0; j < columns; ++j){\n                            System.out.format(\"Enter Element A%d%d: \", i + 1, j + 1);\n                                matrix1[i][j] = matrix.nextInt();\n                        }\n                    }\n                    System.out.println(\"Enter element of 2nd matrix: \");\n                    for(i = 0; i < rows; ++i){\n                        for(j = 0; j < columns; ++j){\n                            System.out.format(\"Enter Element B%d%d: \", i + 1, j + 1);\n                            matrix2[i][j] = matrix.nextInt();\n                        }\n                    }\n                    for(i = 0; i < rows; ++i){\n                        for(j = 0; j < columns; ++j){\n                            mSum[i][j] = matrix1[i][j] - matrix2[i][j];\n                        }\n                    }\n                    System.out.println(\"\\nDifference of Two Matrices: \\n\");\n                    for(i = 0; i < rows; ++i){\n                        for(j = 0; j < columns; ++j){\n                            System.out.format(\"%d \", mSum[i][j]);\n                            if(j == columns - 1){\n                                System.out.println(\"\\n\");\n                            }\n                        }\n                    }\n                    break;\n                case 3:\n                    System.out.println(\"Enter the number of rows of Matrix 1: \");\n                    rows = matrix.nextInt();\n                    System.out.println(\"Enter the number of columns of Matrix 1: \");\n                    columns = matrix.nextInt();\n                    matrix1 = new int[rows][columns];\n                    System.out.println(\"Enter elements of Matrix 1: \");\n                    for(i = 0; i < rows; ++i){\n                        for(j = 0; j < columns; ++j){\n                            System.out.format(\"Enter Element A%d%d: \", i + 1, j + 1);\n                                matrix1[i][j] = matrix.nextInt();\n                        }\n                    }\n                    System.out.println(\"Enter the number of rows of Matrix 2: \");\n                    rows1 = matrix.nextInt();\n                    System.out.println(\"Enter the number of columns of Matrix 2: \");\n                    columns1 = matrix.nextInt();\n                    if(columns != rows1){\n                        System.out.println(\"The Matrices cant be multiplied with each other as Number of columns of Matrix 1 id not equal to Number of rows of Matrix 2.\");\n                    }else{\n                        int[][] second = new int[rows1][columns1];\n                        int[][] multiply = new int[rows][columns1];\n                    System.out.println(\"Enter Elements of Matrix 2: \");\n                    for(i = 0; i < rows1; ++i){\n                        for(j = 0; j < columns1; ++j){\n                            System.out.format(\"Enter Element A%d%d: \", i + 1, j + 1);\n                                second[i][j] = matrix.nextInt();\n                        }\n                    }\n                    for(i = 0; i < rows; i++){\n                        for(j = 0; j < columns; j++){\n                            for(k = 0; k < rows1; k++){\n                                rSum = rSum + matrix1[i][k] * second[k][j];\n                            }\n                            multiply[i][j] = rSum;\n                            rSum = 0;\n                        }\n                    }\n                    System.out.println(\"Product of the Matrices: \");\n                    for(i = 0; i < rows; i++){\n                        for(j = 0;j < columns1; j++){\n                            System.out.format(\"%d\\t\", multiply[i][j]);\n                            if(j == columns1 - 1){\n                            System.out.print(\"\\n\");\n                            }\n                        }\n                    }\n                    }\n                    break;\n                case 4:\n                    System.out.println(\"Enter Number of Rows: \");\n                    rows = matrix.nextInt();\n                    System.out.println(\"Enter Number of Columns: \");\n                    columns = matrix.nextInt();\n                    System.out.println(\"\\nEnter elements of the matrix: \\n\");\n                    for(i = 0; i < rows; ++i){\n                        for(j = 0; j < columns; ++j){\n                            System.out.format(\"Enter Element A%d%d: \", i + 1, j + 1);\n                                matrix1[i][j] = matrix.nextInt();\n                        }\n                    }\n                    System.out.println(\"The Matrix is: \");\n                    for(i = 0; i < rows; i++){\n                        for(j = 0; j < columns; j++){\n                            System.out.print(matrix1[i][j] + \" \");\n                        }\n                        System.out.println();\n                    }\n                    int[][] transpose = new int[columns][rows];\n                    for(i = 0; i < rows; i++){\n                        for(j = 0; j < columns; j++){\n                            transpose[i][j] = matrix1[j][i];\n                        }\n                    }\n                    System.out.println(\"Printing Matrix After Transpose: \");\n                    for(i = 0; i < rows; i++){\n                        for(j = 0; j < columns; j++){\n                            System.out.print(transpose[i][j] + \" \");\n                        }\n                        System.out.println();\n                    }\n                    break;\n                }\n                break;\n            case 16:\n                System.out.print(\"\\033[H\\033[2J\");\n                e = 1;\n                System.out.println(\"\\nThank You For Visiting\\n\");\n                System.exit(0);\n                break;\n        }\n        } calc.close();\n    } \n}\n"
                },
                {
                    "name": "calc.py",
                    "type": "file",
                    "keywords": [
                        "calculation",
                        "unit",
                        "system",
                        "division",
                        "printing",
                        "clears",
                        "function",
                        "Python",
                        "area",
                        "actions",
                        "addition",
                        "equations",
                        "components",
                        "converting",
                        "executes",
                        "temperatures",
                        "multiplication",
                        "implements",
                        "uses",
                        "takes",
                        "program",
                        "let",
                        "input",
                        "conversions",
                        "operations",
                        "calculating",
                        "choice",
                        "prompts",
                        "include",
                        "subtraction",
                        "print",
                        "prints",
                        "task",
                        "results",
                        "functions",
                        "based",
                        "triangle",
                        "utility",
                        "menu",
                        "string",
                        "corresponding",
                        "messages",
                        "code",
                        "calculations",
                        "solving"
                    ],
                    "annotation": "This Python code implements a command-line calculator and utility program with multiple functions such as arithmetic operations, area calculation of a triangle, solving quadratic equations, unit conversions, and a simple string print. It uses a menu system to let the user choose a task, then executes the corresponding function based on their input. Key components include a main menu which clears the screen and prompts the user for their choice, and various functions for different operations like addition, subtraction, multiplication, division, calculating the area of a triangle, solving quadratic equations, converting temperatures, and printing messages. Each function clears the screen, takes user input, performs calculations or actions, and prints results.",
                    "content": "from os import system\nfrom math import sqrt\n\ndef main():\n    system('cls');\n    print(\"1. Addition\\n2. Subtraction\\n3. Multipication\\n4. Division\\n5. Area of Triangle\\n6. Quadratic Solutions\\n7. Converter\\n8. Print\\n\")\n    option = int(input(\"Enter Your Choice: \"))\n    switchers = {\n        1: addition,\n        2: substraction,\n        3: multipication,\n        4: division,\n        5: triangle,\n        6: quadratic,\n        7: converter,\n        8: printing\n    }\n    switchers.get(option)()\n\ndef addition():\n    system('cls')\n    a = float(input(\"Enter 1st Number: \"))\n    b = float(input(\"Enter 2nd Number: \"))\n    c = a + b\n    print(\"\\nSum of %0.2f and %0.2f is : %0.2f\" % (a, b, c))\n\ndef substraction():\n    system('cls')\n    a = float(input(\"Enter 1st Number: \"))\n    b = float(input(\"Enter 2nd Number: \"))\n    c = a - b\n    print(\"\\nDifference of %0.2f and %0.2f is : %0.2f\" % (a, b, c))\n\ndef multipication():\n    system('cls')\n    a = float(input(\"Enter 1st Number: \"))\n    b = float(input(\"Enter 2nd Number: \"))\n    c = a * b\n    print(\"\\nMultipication of %0.2f and %0.2f is : %0.2f\" % (a, b, c))\n\ndef division():\n    system('cls')\n    a = float(input(\"Enter 1st Number: \"))\n    b = float(input(\"Enter 2nd Number: \"))\n    c = a / b\n    print(\"\\nDivision of %0.2f and %0.2f is : %0.2f\" % (a, b, c))\n\ndef triangle():\n    system('cls')\n    a = float(input(\"Enter 1st Side: \"))\n    b = float(input(\"Enter 2st Side: \"))\n    c = float(input(\"Enter 3st Side: \"))\n    s = (a + b + c)/2\n    area = (s*(s-a)*(s-b)*(s-c)) ** 0.5  \n    print('The area of the triangle is %0.2f' %area)\n\ndef quadratic():\n    system('cls')\n    print(\"Quadratic Function : (a * x^2) + b*x + c\")\n    a = float(input(\"Enter Value of a: \"))\n    b = float(input(\"Enter Value of b: \"))\n    c = float(input(\"Enter Value of c: \"))\n\n    r = b**2 - 4*a*c;\n    if r > 0:\n        roots = 2\n        x = (((-b) + sqrt(r))/(2*a))\n        y = (((-b) + sqrt(r))/(2*a))\n        print(\"There are two roots: %f an d %f\" % (x, y))\n    elif r == 0:\n        roots = 1\n        x = (-b) / 2*a\n        print(\"There is 1 root: \", x)\n    else:\n        roots = 0\n        print(\"No Roots, Disctiminant is less than 0.\")\n\ndef converter():\n    system('cls')\n    print(\"1. Celsius to Fahrenheit\\n2. Fahrenheit to Celsius\\n\")\n    option1 = int(input(\"Enter Your Choice: \"))\n    switchers = {\n        1: celsius,\n        2: fahrenheit\n    }\n    switchers.get(option1)()\n\ndef celsius():\n    system('cls')\n    cel = float(input(\"Enter Temperature in Celsius: \"))\n    f = (cel * 9/5) + 32;\n    print(\"The Temperature of %f Celsius in Fahrenheit is : %f\" % (cel, f))\ndef fahrenheit():\n    system('cls')\n    f = float(input(\"Enter Temperature in Fahrenheit: \"))\n    cel = (f - 32) * 5/9\n    print(\"The Temperature of %f Fahrenheit in Celsius is : %f\" % (f, cel))\n\ndef printing():\n    system('cls')\n    print(\"\\\"Hello World\\\"\")\n    print('\\'Hello World\\'')\n    message = \"Hello World (Printed using a variable)\"\n    print(message)\n\nmain()\n"
                }
            ]
        },
        {
            "name": "",
            "type": "folder",
            "keywords": [],
            "children": [
                {
                    "name": "Cargo.lock",
                    "type": "file",
                    "keywords": [
                        "used",
                        "dependencies",
                        "ensures",
                        "sources",
                        "Rust",
                        "project",
                        "builds",
                        "including",
                        "built",
                        "generated",
                        "managed",
                        "version",
                        "depending",
                        "Cargo.lock",
                        "checksum",
                        "URL",
                        "consistency",
                        "Cargo",
                        "itertools",
                        "lock",
                        "package",
                        "lists",
                        "packages",
                        "calc",
                        "versions",
                        "manages",
                        "file",
                        "depends",
                        "projects",
                        "manager",
                        "source",
                        "code",
                        "ensure",
                        "snippet"
                    ],
                    "annotation": "The code is a snippet from a `Cargo.lock` file, which is used in Rust projects managed by Cargo, Rust's package manager. This file is automatically generated and manages the dependencies of the project to ensure consistency across different builds. The snippet lists three packages: \"calc\" (version 0.1.0, depending on \"itertools\"), \"either\" (version 1.6.1, including a checksum and source URL), and \"itertools\" (version 0.10.0, which depends on \"either\"). This lock file ensures that the exact versions and sources of these dependencies are used whenever the project is built.",
                    "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\n[[package]]\nname = \"calc\"\nversion = \"0.1.0\"\ndependencies = [\n \"itertools\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457\"\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37d572918e350e82412fe766d24b15e6682fb2ed2bbe018280caa810397cb319\"\ndependencies = [\n \"either\",\n]\n"
                },
                {
                    "name": "Cargo.toml",
                    "type": "file",
                    "keywords": [
                        "crate",
                        "used",
                        "dependencies",
                        ">",
                        "section",
                        "Rust",
                        "specifies",
                        "project",
                        "<",
                        "Minimal",
                        "including",
                        "written",
                        "Obvious",
                        "version",
                        "manage",
                        "Boisdequin",
                        "TOML",
                        "Cargo",
                        "serves",
                        "configuration",
                        "Tom",
                        "edition",
                        "@",
                        "package",
                        "author",
                        "metadata",
                        "Cargo.toml",
                        "calc",
                        "Henry",
                        "indicates",
                        "Language",
                        "name",
                        "file",
                        "information",
                        "depends",
                        "projects",
                        "]",
                        "code",
                        "helps",
                        "snippet"
                    ],
                    "annotation": "The code snippet is written in TOML (Tom's Obvious, Minimal Language) and serves as a Rust project's Cargo manifest file (`Cargo.toml`). This manifest specifies the project's metadata, including the package name \"calc,\" version \"0.1.0,\" and author information (\"Henry Boisdequin <65845077+henryboisdequin@users.noreply.github.com>\"). The Rust edition used is \"2018.\" The `[dependencies]` section indicates that the project depends on the \"itertools\" crate with version \"0.10\". This file helps manage dependencies and project configuration for Rust projects.",
                    "content": "[package]\nname = \"calc\"\nversion = \"0.1.0\"\nauthors = [\"Henry Boisdequin <65845077+henryboisdequin@users.noreply.github.com>\"]\nedition = \"2018\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nitertools = \"0.10\"\n"
                },
                {
                    "name": "README.md",
                    "type": "file",
                    "keywords": [
                        "text",
                        "Rust",
                        "project",
                        "users",
                        "ensuring",
                        "written",
                        "implementation",
                        "Cargo",
                        "cloning",
                        "executing",
                        "calculator",
                        "guides",
                        "navigating",
                        "testing",
                        "run",
                        "repository",
                        "instructed",
                        "provided",
                        "installed",
                        "execution",
                        "setup",
                        "cargo",
                        "provides",
                        "directory",
                        "test",
                        "purposes"
                    ],
                    "annotation": "The provided text describes a simple command-line calculator written in Rust. To run the calculator, it guides users through cloning the repository, ensuring Rust and Cargo are installed, navigating to the project directory, and executing `cargo run` to start the calculator. For testing purposes, users are instructed to run `cargo test`. The text does not specify the internal implementation of the calculator but provides a basic outline for setup and execution.",
                    "content": "Simple command-line calculator in Rust.\n\n## To Run\n\n1. Clone this repository\n\n2. Make sure you have Rust and cargo installed\n\n3. Cd into the project directory and type `cargo run`\n\n4. To test: run `cargo test`\n"
                },
                {
                    "name": "src",
                    "type": "folder",
                    "keywords": [],
                    "children": [
                        {
                            "name": "calc.rs",
                            "type": "file",
                            "keywords": [
                                "differences",
                                "vector",
                                "used",
                                "correctness",
                                "methods",
                                "Rust",
                                "function",
                                "ensuring",
                                ":Itertools",
                                "included",
                                "multiplies",
                                "written",
                                "Calc",
                                "test_all_operations",
                                "itertools",
                                "numbers",
                                "div",
                                "reduces",
                                "arrays",
                                "struct",
                                "sequence",
                                "sub",
                                "operations",
                                "assertions",
                                "include",
                                "elements",
                                "Expected",
                                "subtracts",
                                "validate",
                                "mul",
                                "quotients",
                                "provided",
                                "products",
                                "method",
                                "defines",
                                "sums",
                                "code",
                                "test",
                                "library"
                            ],
                            "annotation": "The code is written in Rust and defines a struct `Calc` with methods for basic arithmetic operations on a vector of floating-point numbers. The `add` method sums all elements, `sub` subtracts elements sequentially, `mul` multiplies all elements, and `div` divides elements sequentially. The `itertools::Itertools` library is used for the `fold1` function, which reduces the sequence. A test function `test_all_operations` is also included to validate each method with assertions. Expected outputs include sums, differences, products, and quotients of provided arrays, ensuring the correctness of the arithmetic operations.",
                            "content": "use itertools::Itertools;\nuse std::ops::{Div, Sub};\n\npub struct Calc;\n\nimpl Calc {\n    pub fn add(arr: Vec<f64>) -> f64 {\n        arr.iter().sum::<f64>()\n    }\n\n    pub fn sub(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Sub::sub).unwrap_or(0.0)\n    }\n\n    pub fn mul(arr: Vec<f64>) -> f64 {\n        arr.iter().product()\n    }\n\n    pub fn div(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Div::div).unwrap_or(0.0)\n    }\n}\n\n#[test]\nfn test_all_operations() {\n    // addition\n    assert_eq!(Calc::add([2.0, 4.0, 6.0].to_vec()), 12.0);\n    assert_eq!(Calc::add([-6.0, 5.0, 10.0].to_vec()), 9.0);\n\n    // subtraction\n    assert_eq!(Calc::sub([10.0, 4.0, 6.0].to_vec()), 0.0);\n    assert_eq!(Calc::sub([100.0, 10.0, 19.0].to_vec()), 71.0);\n\n    // multiplication\n    assert_eq!(Calc::mul([10.0, 10.0, 2.0].to_vec()), 200.0);\n    assert_eq!(Calc::mul([-3.0, 2.0].to_vec()), -6.0);\n\n    // division\n    assert_eq!(Calc::div([54.0, 2.0, 3.0].to_vec()), 9.0);\n    assert_eq!(Calc::div([4.0, 2.0, 5.0].to_vec()), 0.4);\n}\n"
                        },
                        {
                            "name": "main.rs",
                            "type": "file",
                            "keywords": [
                                "methods",
                                "Rust",
                                "calculated",
                                "named",
                                "occurs",
                                "quit",
                                "equations",
                                "written",
                                "output",
                                "develops",
                                "expected",
                                "exits",
                                "operators",
                                "splits",
                                "numbers",
                                "equation",
                                "involves",
                                "parses",
                                "using",
                                "read",
                                "command",
                                "calculator",
                                "q",
                                "program",
                                "input",
                                "matches",
                                "prompts",
                                "printed",
                                "checks",
                                "operands",
                                "provided",
                                "results",
                                "operator",
                                "operation",
                                "based",
                                "result",
                                "applies",
                                "/",
                                "detected",
                                "varies",
                                "corresponding",
                                "module",
                                "code",
                                "*"
                            ],
                            "annotation": "The code is written in Rust and develops a basic command-line calculator. It continuously prompts the user to enter a mathematical equation or \"q\" to quit. The input is read, and if it matches the quit command, the program exits. Otherwise, the code checks for valid arithmetic operators (`+`, `-`, `*`, `/`). If an operator is detected, it splits the input into operands, parses them to floating-point numbers, and then applies the corresponding arithmetic operation using methods from a module named `Calc`. The result is printed. If the input format is invalid, a panic occurs. The expected output varies based on user input but involves calculated results of provided equations.",
                            "content": "mod calc;\nuse calc::Calc;\nuse std::io;\n\nfn main() {\n    println!(\"Welcome to the a basic calculator built with Rust.\");\n\n    loop {\n        println!(\"Please enter an equation or \\\"q\\\" to quit: \");\n\n        let mut input = String::new();\n        io::stdin()\n            .read_line(&mut input)\n            .expect(\"Failed to read input\");\n\n        if input.trim() == \"q\" {\n            println!(\"Thanks for using this program.\");\n            break;\n        }\n\n        let valid_operators = vec![\"+\", \"-\", \"*\", \"/\"];\n\n        for operator in valid_operators {\n            match input.find(operator) {\n                Some(_) => {\n                    let parts: Vec<&str> = input.split(operator).collect();\n\n                    if parts.len() < 2 {\n                        panic!(\"Invalid equation.\");\n                    }\n\n                    let mut number_array = vec![];\n                    let mut counter = 0;\n\n                    while counter != parts.len() {\n                        let val: f64 = parts[counter].trim().parse().ok().expect(\"Enter a number.\");\n                        number_array.push(val);\n                        counter += 1;\n                    }\n\n                    match operator {\n                        \"+\" => println!(\"{}\", Calc::add(number_array)),\n                        \"-\" => println!(\"{}\", Calc::sub(number_array)),\n                        \"*\" => println!(\"{}\", Calc::mul(number_array)),\n                        \"/\" => println!(\"{}\", Calc::div(number_array)),\n                        _ => println!(\"Only addition, subtraction, multiplication and division are supported.\")\n                    }\n                }\n\n                None => {\n                    continue;\n                }\n            }\n        }\n    }\n}\n"
                        }
                    ]
                }
            ]
        }
    ]
}