{
    "name": "rust-calculator",
    "path": "rust-calculator/",
    "type": "folder",
    "keywords": [],
    "children": [
        {
            "name": "Cargo.lock",
            "path": "rust-calculator/Cargo.lock",
            "type": "file",
            "keywords": [
                "Rust",
                "calc",
                "dependencies",
                "file",
                "instructs",
                "package",
                "itertools",
                "depends",
                "fetch",
                "lists",
                "manager",
                "crates",
                "contains",
                "TOML",
                "Cargo",
                "configuration",
                "code",
                "checksum",
                "used",
                "verify",
                "packages",
                "fetched",
                "project",
                "details",
                "registry",
                "version"
            ],
            "annotation": "The code is a TOML configuration file for Cargo, Rust's package manager. This file lists the Rust packages (crates) and their dependencies used in a project. It contains details for three packages: \"calc\" (version 0.1.0) which depends on \"itertools,\" \"either\" (version 1.6.1) fetched from the crates.io registry with its checksum, and \"itertools\" (version 0.10.0) which also depends on \"either.\" The file instructs Cargo on how to fetch and verify these dependencies.",
            "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\n[[package]]\nname = \"calc\"\nversion = \"0.1.0\"\ndependencies = [\n \"itertools\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457\"\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37d572918e350e82412fe766d24b15e6682fb2ed2bbe018280caa810397cb319\"\ndependencies = [\n \"either\",\n]\n"
        },
        {
            "name": "Cargo.toml",
            "path": "rust-calculator/Cargo.toml",
            "type": "file",
            "keywords": [
                "Rust",
                "calc",
                "dependencies",
                "file",
                "package",
                "use",
                "itertools",
                "specifying",
                "helps",
                "projects",
                "given",
                "lists",
                "define",
                "section",
                "code",
                "configurations",
                "specifies",
                "used",
                "case",
                "]",
                "name",
                "managing",
                "project",
                "crate",
                "edition",
                "author",
                "version",
                "building",
                "metadata"
            ],
            "annotation": "The given code is a `Cargo.toml` file used in Rust projects to define a package's metadata and dependencies. The `[package]` section specifies the package name as \"calc\", version \"0.1.0\", the author, and the edition of Rust to use (\"2018\"). The `[dependencies]` section lists the project's dependencies, in this case, the `itertools` crate version \"0.10\". This file helps in managing and building Rust projects by specifying necessary configurations and dependencies.",
            "content": "[package]\nname = \"calc\"\nversion = \"0.1.0\"\nauthors = [\"Henry Boisdequin <65845077+henryboisdequin@users.noreply.github.com>\"]\nedition = \"2018\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nitertools = \"0.10\"\n"
        },
        {
            "name": "README.md",
            "path": "rust-calculator/README.md",
            "type": "file",
            "keywords": [
                "program",
                "Rust",
                "instructions",
                "provided",
                "test",
                "installed",
                "calculator",
                "running",
                "package",
                "need",
                "use",
                "explanation",
                "containing",
                "navigate",
                "manager",
                "ensure",
                "testing",
                "command",
                "Cargo",
                "snippet",
                "code",
                "run",
                "repository",
                "provides",
                "execute",
                "written",
                "cargo",
                "directory",
                "project",
                "text"
            ],
            "annotation": "The text provides instructions for running and testing a simple command-line calculator written in Rust. To use the calculator, you need to clone the repository containing the code, ensure that Rust and Cargo (Rust's package manager) are installed, navigate to the project directory, and use the `cargo run` command to execute the program. For testing the code, you would use the `cargo test` command. No code snippet is provided for explanation here.",
            "content": "Simple command-line calculator in Rust.\n\n## To Run\n\n1. Clone this repository\n\n2. Make sure you have Rust and cargo installed\n\n3. Cd into the project directory and type `cargo run`\n\n4. To test: run `cargo test`\n"
        },
        {
            "name": "src",
            "path": "rust-calculator/src",
            "type": "folder",
            "keywords": [],
            "children": [
                {
                    "name": "calc.rs",
                    "path": "rust-calculator/src/calc.rs",
                    "type": "file",
                    "keywords": [
                        "Rust",
                        "div",
                        "test",
                        "numbers",
                        "\u2019",
                        "multiplies",
                        "division",
                        "folding",
                        "Calc",
                        "uses",
                        "assertions",
                        "tests",
                        "function",
                        "addition",
                        "defines",
                        "confirm",
                        "sums",
                        "Itertools",
                        "subtracts",
                        "struct",
                        "code",
                        "sub",
                        "vector",
                        "mul",
                        "methods",
                        ">",
                        "used",
                        "vectors",
                        "operations",
                        "verify",
                        "expected",
                        "elements",
                        "]",
                        "perform",
                        "written",
                        "crate",
                        "f64",
                        "subtraction",
                        "test_all_operations",
                        "multiplication",
                        "defined"
                    ],
                    "annotation": "The code is written in Rust and defines a struct `Calc` with methods to perform basic arithmetic operations: addition, subtraction, multiplication, and division on vectors of floating-point numbers (`Vec<f64>`). The `add` function sums all elements, `sub` iteratively subtracts elements, `mul` multiplies all elements, and `div` iteratively divides elements in the vector. The `Itertools` crate is used for folding operations in `sub` and `div` methods. A test function `test_all_operations` uses Rust\u2019s `#[test]` attribute to verify these operations with assertions. The expected outputs from the tests confirm the correct arithmetic operations as defined by the `Calc` struct methods.",
                    "content": "use itertools::Itertools;\nuse std::ops::{Div, Sub};\n\npub struct Calc;\n\nimpl Calc {\n    pub fn add(arr: Vec<f64>) -> f64 {\n        arr.iter().sum::<f64>()\n    }\n\n    pub fn sub(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Sub::sub).unwrap_or(0.0)\n    }\n\n    pub fn mul(arr: Vec<f64>) -> f64 {\n        arr.iter().product()\n    }\n\n    pub fn div(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Div::div).unwrap_or(0.0)\n    }\n}\n\n#[test]\nfn test_all_operations() {\n    // addition\n    assert_eq!(Calc::add([2.0, 4.0, 6.0].to_vec()), 12.0);\n    assert_eq!(Calc::add([-6.0, 5.0, 10.0].to_vec()), 9.0);\n\n    // subtraction\n    assert_eq!(Calc::sub([10.0, 4.0, 6.0].to_vec()), 0.0);\n    assert_eq!(Calc::sub([100.0, 10.0, 19.0].to_vec()), 71.0);\n\n    // multiplication\n    assert_eq!(Calc::mul([10.0, 10.0, 2.0].to_vec()), 200.0);\n    assert_eq!(Calc::mul([-3.0, 2.0].to_vec()), -6.0);\n\n    // division\n    assert_eq!(Calc::div([54.0, 2.0, 3.0].to_vec()), 9.0);\n    assert_eq!(Calc::div([4.0, 2.0, 5.0].to_vec()), 0.4);\n}\n"
                },
                {
                    "name": "main.rs",
                    "path": "rust-calculator/src/main.rs",
                    "type": "file",
                    "keywords": [
                        "performs",
                        "Rust",
                        "printing",
                        "quit",
                        "numbers",
                        "continues",
                        "enters",
                        "using",
                        "calculator",
                        "found",
                        "output",
                        "Calc",
                        "operator",
                        "based",
                        "function",
                        "module",
                        "reads",
                        "decides",
                        "implements",
                        "result",
                        "operators",
                        "code",
                        "runs",
                        "operation",
                        "Depending",
                        "splits",
                        "checks",
                        "/",
                        "methods",
                        "equations",
                        "input",
                        "parses",
                        "exit",
                        "*",
                        "user",
                        "written",
                        "accepting",
                        "parts",
                        "corresponding",
                        "loop",
                        "typing",
                        "q"
                    ],
                    "annotation": "The code is written in Rust and implements a basic calculator that runs in a loop, accepting user input for mathematical equations until the user enters \"q\" to quit. The `main` function reads input from the user and checks for valid operators (`+`, `-`, `*`, `/`). Depending on the operator found, it splits the input into parts, parses these parts as floating-point numbers, and then performs the corresponding arithmetic operation using methods from a `Calc` module, printing the result. The loop continues until the user decides to exit by typing \"q\". The output will be the result of the arithmetic operation based on the user's input.",
                    "content": "mod calc;\nuse calc::Calc;\nuse std::io;\n\nfn main() {\n    println!(\"Welcome to the a basic calculator built with Rust.\");\n\n    loop {\n        println!(\"Please enter an equation or \\\"q\\\" to quit: \");\n\n        let mut input = String::new();\n        io::stdin()\n            .read_line(&mut input)\n            .expect(\"Failed to read input\");\n\n        if input.trim() == \"q\" {\n            println!(\"Thanks for using this program.\");\n            break;\n        }\n\n        let valid_operators = vec![\"+\", \"-\", \"*\", \"/\"];\n\n        for operator in valid_operators {\n            match input.find(operator) {\n                Some(_) => {\n                    let parts: Vec<&str> = input.split(operator).collect();\n\n                    if parts.len() < 2 {\n                        panic!(\"Invalid equation.\");\n                    }\n\n                    let mut number_array = vec![];\n                    let mut counter = 0;\n\n                    while counter != parts.len() {\n                        let val: f64 = parts[counter].trim().parse().ok().expect(\"Enter a number.\");\n                        number_array.push(val);\n                        counter += 1;\n                    }\n\n                    match operator {\n                        \"+\" => println!(\"{}\", Calc::add(number_array)),\n                        \"-\" => println!(\"{}\", Calc::sub(number_array)),\n                        \"*\" => println!(\"{}\", Calc::mul(number_array)),\n                        \"/\" => println!(\"{}\", Calc::div(number_array)),\n                        _ => println!(\"Only addition, subtraction, multiplication and division are supported.\")\n                    }\n                }\n\n                None => {\n                    continue;\n                }\n            }\n        }\n    }\n}\n"
                }
            ]
        }
    ]
}