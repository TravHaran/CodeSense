{
    "name": "rust-calculator",
    "path": "rust-calculator/",
    "type": "folder",
    "keywords": [],
    "children": [
        {
            "name": "Cargo.lock",
            "path": "rust-calculator/Cargo.lock",
            "type": "file",
            "keywords": [
                "itertools",
                "comment",
                "specifies",
                "version",
                "package",
                "code",
                "Cargo",
                "dependencies",
                "lists",
                "Obvious",
                "intended",
                "edited",
                "source",
                "file",
                "includes",
                "packages",
                "verification",
                "generated",
                "Tom",
                "required",
                "manager",
                "information",
                "turn",
                "configuration",
                "entry",
                "given",
                "Minimal",
                "project",
                "URL",
                "Rust",
                "calc",
                "Language",
                "TOML",
                "depends"
            ],
            "annotation": "The given code is a TOML (Tom's Obvious, Minimal Language) configuration file generated by Cargo, the Rust package manager. It lists the dependencies required for a Rust project. Specifically, it specifies two packages: \"calc\" version 0.1.0, which depends on \"itertools\", and \"itertools\" version 0.10.0, which in turn depends on \"either\" version 1.6.1. Each package entry includes version information, source URL, and a checksum for verification. This file is not intended to be manually edited, as indicated by the comment.",
            "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\n[[package]]\nname = \"calc\"\nversion = \"0.1.0\"\ndependencies = [\n \"itertools\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457\"\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37d572918e350e82412fe766d24b15e6682fb2ed2bbe018280caa810397cb319\"\ndependencies = [\n \"either\",\n]\n"
        },
        {
            "name": "Cargo.toml",
            "path": "rust-calculator/Cargo.toml",
            "type": "file",
            "keywords": [
                "dependency",
                "Henry",
                "itertools",
                "settings",
                "name",
                "specifies",
                "version",
                "Cargo.toml",
                "package",
                "code",
                "Cargo",
                "dependencies",
                "Obvious",
                "crate",
                "metadata",
                "file",
                "includes",
                "written",
                "Tom",
                "edition",
                "used",
                "managing",
                "configuration",
                "helps",
                "authored",
                "Boisdequin",
                "Minimal",
                "project",
                "defines",
                "Rust",
                "calc",
                "Language",
                "TOML"
            ],
            "annotation": "The code is written in TOML (Tom's Obvious, Minimal Language) and defines a Cargo manifest file, `Cargo.toml`, for a Rust project. The manifest specifies the project's metadata: the package name is \"calc,\" its version is \"0.1.0,\" and it is authored by Henry Boisdequin. The Rust edition used is 2018. It also includes a dependency on the `itertools` crate, version \"0.10\". This file helps in managing the project's dependencies and configuration settings.",
            "content": "[package]\nname = \"calc\"\nversion = \"0.1.0\"\nauthors = [\"Henry Boisdequin <65845077+henryboisdequin@users.noreply.github.com>\"]\nedition = \"2018\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nitertools = \"0.10\"\n"
        },
        {
            "name": "README.md",
            "path": "rust-calculator/README.md",
            "type": "file",
            "keywords": [
                "program",
                "functionality",
                "code",
                "steps",
                "snippet",
                "cloning",
                "describing",
                "instructions",
                "set",
                "executing",
                "directory",
                "provided",
                "application",
                "calculator",
                "written",
                "details",
                "running",
                "run",
                "installed",
                "navigating",
                "repository",
                "provides",
                "tests",
                "given",
                "project",
                "Rust",
                "cargo",
                "ensuring"
            ],
            "annotation": "The given text is a set of instructions, not a code snippet, describing how to run and test a simple command-line calculator written in Rust. It provides steps for executing the project: cloning the repository, ensuring Rust and cargo are installed, navigating to the project directory, running the application, and executing tests. No specific details about the program's code or functionality are provided, just the operational steps.",
            "content": "Simple command-line calculator in Rust.\n\n## To Run\n\n1. Clone this repository\n\n2. Make sure you have Rust and cargo installed\n\n3. Cd into the project directory and type `cargo run`\n\n4. To test: run `cargo test`\n"
        },
        {
            "name": "src",
            "path": "rust-calculator/src",
            "type": "folder",
            "keywords": [],
            "children": [
                {
                    "name": "calc.rs",
                    "path": "rust-calculator/src/calc.rs",
                    "type": "file",
                    "keywords": [
                        "elements",
                        "itertools",
                        "allow",
                        "vectors",
                        "subtract",
                        "Expected",
                        "struct",
                        "Div",
                        "vector",
                        "reduction",
                        "Calc",
                        "sub",
                        "code",
                        "division",
                        "produce",
                        "input",
                        "methods",
                        "products",
                        "add",
                        "includes",
                        "quotients",
                        "unit",
                        "provided",
                        "operations",
                        "div",
                        "subtraction",
                        "written",
                        "cases",
                        "operator",
                        "traits",
                        "std",
                        "function",
                        ":ops",
                        "Sub",
                        "mul",
                        "tests",
                        "perform",
                        "sum",
                        ":Itertools",
                        "directives",
                        "results",
                        "test_all_operations",
                        "numbers",
                        "multiply",
                        "include",
                        "differences",
                        "defines",
                        "Rust",
                        "verify",
                        "use",
                        "sums"
                    ],
                    "annotation": "The code is written in Rust and defines a `Calc` struct with methods to perform basic arithmetic operations on vectors of floating-point numbers. The methods `add`, `sub`, `mul`, and `div` sum, subtract, multiply, and divide the elements of the input vector, respectively. The `use itertools::Itertools;` and `use std::ops::{Div, Sub};` directives allow the code to use fold1 for reduction and operator traits for subtraction and division. The `test_all_operations` function includes unit tests to verify that the arithmetic methods produce correct results for various input cases. Expected outputs for provided inputs in the tests include sums, differences, products, and quotients.",
                    "content": "use itertools::Itertools;\nuse std::ops::{Div, Sub};\n\npub struct Calc;\n\nimpl Calc {\n    pub fn add(arr: Vec<f64>) -> f64 {\n        arr.iter().sum::<f64>()\n    }\n\n    pub fn sub(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Sub::sub).unwrap_or(0.0)\n    }\n\n    pub fn mul(arr: Vec<f64>) -> f64 {\n        arr.iter().product()\n    }\n\n    pub fn div(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Div::div).unwrap_or(0.0)\n    }\n}\n\n#[test]\nfn test_all_operations() {\n    // addition\n    assert_eq!(Calc::add([2.0, 4.0, 6.0].to_vec()), 12.0);\n    assert_eq!(Calc::add([-6.0, 5.0, 10.0].to_vec()), 9.0);\n\n    // subtraction\n    assert_eq!(Calc::sub([10.0, 4.0, 6.0].to_vec()), 0.0);\n    assert_eq!(Calc::sub([100.0, 10.0, 19.0].to_vec()), 71.0);\n\n    // multiplication\n    assert_eq!(Calc::mul([10.0, 10.0, 2.0].to_vec()), 200.0);\n    assert_eq!(Calc::mul([-3.0, 2.0].to_vec()), -6.0);\n\n    // division\n    assert_eq!(Calc::div([54.0, 2.0, 3.0].to_vec()), 9.0);\n    assert_eq!(Calc::div([4.0, 2.0, 5.0].to_vec()), 0.4);\n}\n"
                },
                {
                    "name": "main.rs",
                    "path": "rust-calculator/src/main.rs",
                    "type": "file",
                    "keywords": [
                        "corresponding",
                        "program",
                        "varies",
                        "user",
                        "output",
                        "displaying",
                        "enter",
                        "Calc",
                        "code",
                        "input",
                        "q",
                        "process",
                        "quit",
                        "split",
                        "exiting",
                        "custom",
                        "splits",
                        "equation",
                        "string",
                        "operations",
                        "printed",
                        "/",
                        "calculator",
                        "written",
                        "module",
                        "+",
                        "operators",
                        "implements",
                        "thanking",
                        "operator",
                        "calculation",
                        "function",
                        "uses",
                        "results",
                        "exits",
                        "converts",
                        "perform",
                        "prompts",
                        "numbers",
                        "parses",
                        "Rust",
                        "based",
                        "expected",
                        "strings",
                        "supported"
                    ],
                    "annotation": "The code is written in Rust and implements a basic calculator that can process user input for arithmetic operations. The main function continuously prompts the user to enter an equation or \"q\" to quit. It parses the input for supported operators (+, -, *, /), splits the input string by the operator, converts the split strings into numbers, and uses a custom `Calc` module to perform the corresponding calculation. The results are then printed to the console. If the input is \"q\", the program exits thanking the user. The expected output varies based on user input, either displaying calculation results or exiting on \"q\".",
                    "content": "mod calc;\nuse calc::Calc;\nuse std::io;\n\nfn main() {\n    println!(\"Welcome to the a basic calculator built with Rust.\");\n\n    loop {\n        println!(\"Please enter an equation or \\\"q\\\" to quit: \");\n\n        let mut input = String::new();\n        io::stdin()\n            .read_line(&mut input)\n            .expect(\"Failed to read input\");\n\n        if input.trim() == \"q\" {\n            println!(\"Thanks for using this program.\");\n            break;\n        }\n\n        let valid_operators = vec![\"+\", \"-\", \"*\", \"/\"];\n\n        for operator in valid_operators {\n            match input.find(operator) {\n                Some(_) => {\n                    let parts: Vec<&str> = input.split(operator).collect();\n\n                    if parts.len() < 2 {\n                        panic!(\"Invalid equation.\");\n                    }\n\n                    let mut number_array = vec![];\n                    let mut counter = 0;\n\n                    while counter != parts.len() {\n                        let val: f64 = parts[counter].trim().parse().ok().expect(\"Enter a number.\");\n                        number_array.push(val);\n                        counter += 1;\n                    }\n\n                    match operator {\n                        \"+\" => println!(\"{}\", Calc::add(number_array)),\n                        \"-\" => println!(\"{}\", Calc::sub(number_array)),\n                        \"*\" => println!(\"{}\", Calc::mul(number_array)),\n                        \"/\" => println!(\"{}\", Calc::div(number_array)),\n                        _ => println!(\"Only addition, subtraction, multiplication and division are supported.\")\n                    }\n                }\n\n                None => {\n                    continue;\n                }\n            }\n        }\n    }\n}\n"
                }
            ]
        }
    ]
}