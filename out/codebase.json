{
    "name": "",
    "type": "folder",
    "keywords": [],
    "children": [
        {
            "name": "Cargo.lock",
            "type": "file",
            "keywords": [
                "calc",
                "used",
                "written",
                "versions",
                "meant",
                "Rust",
                "itertools",
                "packages",
                "lists",
                "Tom",
                "sources",
                "named",
                "Minimal",
                "lock",
                "included",
                "dependencies",
                "ensure",
                "depends",
                "builds",
                "project",
                "editing",
                "TOML",
                "generated",
                "Obvious",
                "integrity",
                "Language",
                "portion",
                "code",
                "file",
                "Checksums",
                "format",
                "managing",
                "package",
                "Cargo.lock",
                "manager",
                "Cargo"
            ],
            "annotation": "This code is a portion of a `Cargo.lock` file written in TOML (Tom's Obvious, Minimal Language) format, which is used for managing Rust project dependencies. It lists the packages named `calc`, `either`, and `itertools`, along with their respective versions and sources. The `calc` package depends on `itertools`, while the `itertools` package itself depends on `either`. Checksums are included to ensure package integrity. This file is automatically generated by Cargo, Rust's package manager, and isn't meant for manual editing. The purpose is to lock dependencies to specific versions to ensure reproducible builds.",
            "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\n[[package]]\nname = \"calc\"\nversion = \"0.1.0\"\ndependencies = [\n \"itertools\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457\"\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37d572918e350e82412fe766d24b15e6682fb2ed2bbe018280caa810397cb319\"\ndependencies = [\n \"either\",\n]\n"
        },
        {
            "name": "Cargo.toml",
            "type": "file",
            "keywords": [
                "calc",
                "written",
                "Rust",
                "using",
                "itertools",
                "metadata",
                "Tom",
                "named",
                "configuration",
                "specifies",
                "author",
                "Minimal",
                "dependencies",
                "Boisdequin",
                "manage",
                "Henry",
                "section",
                "project",
                "version",
                "TOML",
                "Obvious",
                "crate",
                "indicates",
                "Language",
                "relies",
                "details",
                "helps",
                "code",
                "file",
                "package",
                "edition"
            ],
            "annotation": "This code is a configuration file written in TOML (Tom's Obvious, Minimal Language) for a Rust project. It specifies the package details for a project named \"calc\" with version \"0.1.0\". The author is Henry Boisdequin, and the project is using the 2018 edition of Rust. The dependencies section indicates that the project relies on the \"itertools\" crate, version \"0.10\". This configuration helps manage the project's metadata and dependencies.",
            "content": "[package]\nname = \"calc\"\nversion = \"0.1.0\"\nauthors = [\"Henry Boisdequin <65845077+henryboisdequin@users.noreply.github.com>\"]\nedition = \"2018\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nitertools = \"0.10\"\n"
        },
        {
            "name": "README.md",
            "type": "file",
            "keywords": [
                "directory",
                "test",
                "Rust",
                "command",
                "testing",
                "cargo",
                "calculator",
                "clone",
                "describes",
                "operations",
                "ensure",
                "run",
                "project",
                "line",
                "execute",
                "allows",
                "repository",
                "installed",
                "explanation",
                "code",
                "use",
                "implemented",
                "package",
                "program",
                "manager",
                "Cargo"
            ],
            "annotation": "The explanation describes a simple command-line calculator implemented in Rust. To run the program, first, clone the repository and ensure that Rust and its package manager, Cargo, are installed. Then, navigate to the project's directory and use the `cargo run` command to execute the calculator. For testing, you can run `cargo test`. The code likely allows for basic arithmetic operations via the command line.",
            "content": "Simple command-line calculator in Rust.\n\n## To Run\n\n1. Clone this repository\n\n2. Make sure you have Rust and cargo installed\n\n3. Cd into the project directory and type `cargo run`\n\n4. To test: run `cargo test`\n"
        },
        {
            "name": "src",
            "type": "folder",
            "keywords": [],
            "children": [
                {
                    "name": "calc.rs",
                    "type": "file",
                    "keywords": [
                        "division",
                        "perform",
                        "struct",
                        "written",
                        "fold1",
                        "test",
                        "Rust",
                        "using",
                        "div",
                        "methods",
                        "e.g.",
                        "elements",
                        "results",
                        "mul",
                        "operations",
                        "sub",
                        "assertions",
                        "summing",
                        "vectors",
                        "numbers",
                        "confirm",
                        "expected",
                        "iter",
                        "multiplies",
                        "method",
                        "function",
                        "test_all_operations",
                        "vector",
                        "operation",
                        "code",
                        "]",
                        "functionality",
                        "defines",
                        "runs",
                        "work",
                        "Calc",
                        "verify",
                        "performs",
                        "subtraction"
                    ],
                    "annotation": "The code is written in Rust and defines a `Calc` struct with methods to perform basic arithmetic operations on vectors of floating-point numbers. The `add` method sums all elements, `sub` method performs sequential subtraction, `mul` method multiplies all elements, and `div` method performs sequential division using Rust's `iter` and `fold1` methods. The `#[test]` function `test_all_operations` runs several assertions to verify that these methods work correctly, e.g., summing the vector `[2.0, 4.0, 6.0]` results in `12.0`. The expected outputs of these assertions confirm the correct functionality of each arithmetic operation within the `Calc` struct.",
                    "content": "use itertools::Itertools;\nuse std::ops::{Div, Sub};\n\npub struct Calc;\n\nimpl Calc {\n    pub fn add(arr: Vec<f64>) -> f64 {\n        arr.iter().sum::<f64>()\n    }\n\n    pub fn sub(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Sub::sub).unwrap_or(0.0)\n    }\n\n    pub fn mul(arr: Vec<f64>) -> f64 {\n        arr.iter().product()\n    }\n\n    pub fn div(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Div::div).unwrap_or(0.0)\n    }\n}\n\n#[test]\nfn test_all_operations() {\n    // addition\n    assert_eq!(Calc::add([2.0, 4.0, 6.0].to_vec()), 12.0);\n    assert_eq!(Calc::add([-6.0, 5.0, 10.0].to_vec()), 9.0);\n\n    // subtraction\n    assert_eq!(Calc::sub([10.0, 4.0, 6.0].to_vec()), 0.0);\n    assert_eq!(Calc::sub([100.0, 10.0, 19.0].to_vec()), 71.0);\n\n    // multiplication\n    assert_eq!(Calc::mul([10.0, 10.0, 2.0].to_vec()), 200.0);\n    assert_eq!(Calc::mul([-3.0, 2.0].to_vec()), -6.0);\n\n    // division\n    assert_eq!(Calc::div([54.0, 2.0, 3.0].to_vec()), 9.0);\n    assert_eq!(Calc::div([4.0, 2.0, 5.0].to_vec()), 0.4);\n}\n"
                },
                {
                    "name": "main.rs",
                    "type": "file",
                    "keywords": [
                        "division",
                        "written",
                        "output",
                        "module",
                        "Rust",
                        "using",
                        "exits",
                        "methods",
                        "q",
                        "calculator",
                        "checking",
                        "performing",
                        "printed",
                        "equation",
                        "addition",
                        "parsing",
                        "entered",
                        "errors",
                        "operations",
                        "called",
                        "parts",
                        "numbers",
                        "ensures",
                        "input",
                        "processes",
                        "expected",
                        "multiplication",
                        "validity",
                        "quit",
                        "message",
                        "prompts",
                        "termination",
                        "result",
                        "splitting",
                        "operation",
                        "enter",
                        "code",
                        "converting",
                        "format",
                        "string",
                        "operator",
                        "implements",
                        "program",
                        "subtraction"
                    ],
                    "annotation": "The code is written in Rust and implements a basic command-line calculator. It continuously prompts the user to enter an equation or \"q\" to quit. If \"q\" is entered, the program exits. Otherwise, it processes the input to detect basic arithmetic operations (addition, subtraction, multiplication, division) by splitting the input string around the operator, converting the parts to numbers, and then performing the operation using methods from a module called `Calc`. The result is then printed. The program ensures input validity by checking for correct format and parsing errors. The expected output will be the result of the arithmetic operation entered by the user or a termination message if \"q\" is entered.",
                    "content": "mod calc;\nuse calc::Calc;\nuse std::io;\n\nfn main() {\n    println!(\"Welcome to the a basic calculator built with Rust.\");\n\n    loop {\n        println!(\"Please enter an equation or \\\"q\\\" to quit: \");\n\n        let mut input = String::new();\n        io::stdin()\n            .read_line(&mut input)\n            .expect(\"Failed to read input\");\n\n        if input.trim() == \"q\" {\n            println!(\"Thanks for using this program.\");\n            break;\n        }\n\n        let valid_operators = vec![\"+\", \"-\", \"*\", \"/\"];\n\n        for operator in valid_operators {\n            match input.find(operator) {\n                Some(_) => {\n                    let parts: Vec<&str> = input.split(operator).collect();\n\n                    if parts.len() < 2 {\n                        panic!(\"Invalid equation.\");\n                    }\n\n                    let mut number_array = vec![];\n                    let mut counter = 0;\n\n                    while counter != parts.len() {\n                        let val: f64 = parts[counter].trim().parse().ok().expect(\"Enter a number.\");\n                        number_array.push(val);\n                        counter += 1;\n                    }\n\n                    match operator {\n                        \"+\" => println!(\"{}\", Calc::add(number_array)),\n                        \"-\" => println!(\"{}\", Calc::sub(number_array)),\n                        \"*\" => println!(\"{}\", Calc::mul(number_array)),\n                        \"/\" => println!(\"{}\", Calc::div(number_array)),\n                        _ => println!(\"Only addition, subtraction, multiplication and division are supported.\")\n                    }\n                }\n\n                None => {\n                    continue;\n                }\n            }\n        }\n    }\n}\n"
                }
            ]
        }
    ]
}