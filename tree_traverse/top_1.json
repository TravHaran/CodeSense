{
    "input_keywords": [
        "python",
        "function",
        "testkeywordextract",
        "nltk",
        "word2vec",
        "extract_keywords"
    ],
    "results": [
        {
            "score": 0.8333333333333334,
            "matched_keywords": [
                "python",
                "nltk",
                "word2vec",
                "function",
                "extract_keywords"
            ],
            "node": {
                "name": "main.py",
                "type": "file",
                "keywords": [
                    "*",
                    "Comparison",
                    "Embeddings",
                    "Extraction",
                    "Gensim",
                    "Keyword",
                    "NLP",
                    "NLTK",
                    "Processing",
                    "Python",
                    "Similarity",
                    "Text",
                    "Word",
                    "Word2Vec",
                    "calculates",
                    "code",
                    "compare_keywords",
                    "compare_words",
                    "comparing",
                    "computes",
                    "console",
                    "context",
                    "create",
                    "embeddings",
                    "employs",
                    "extract_keywords",
                    "extracted",
                    "extraction",
                    "extracts",
                    "file",
                    "focuses",
                    "function",
                    "input",
                    "keyword",
                    "keywords",
                    "keywords.The",
                    "language",
                    "libraries",
                    "library",
                    "list",
                    "lists",
                    "model",
                    "modeling.1",
                    "output",
                    "performs",
                    "processes",
                    "processing",
                    "reads",
                    "removes",
                    "returned",
                    "score",
                    "sentences",
                    "similarity",
                    "tagging",
                    "techniques",
                    "text",
                    "texts",
                    "tokenizes",
                    "uses",
                    "using",
                    "vector",
                    "verbs",
                    "word",
                    "words",
                    "words.3",
                    "written"
                ],
                "annotation": "The code is written in Python and focuses on keyword extraction from text and comparing the similarity between keyword lists using natural language processing (NLP) techniques. It employs the NLTK and Gensim libraries for text processing and word vector modeling.\n\n1. **Keyword Extraction**: The function `extract_keywords` tokenizes input text, removes stop words, performs part-of-speech tagging, and extracts significant words (nouns and verbs). These extracted keywords are then returned as a list.\n   \n2. **Text Processing and Word Embeddings**: The code reads and processes a context file, tokenizes the sentences into words, and uses the Gensim library's Word2Vec model to create word embeddings for these words.\n\n3. **Similarity Comparison**: With the `compare_words` function, the code computes the similarity between two words using the Word2Vec model, and `compare_keywords` function calculates the cumulative similarity score between two lists of keywords.\n\nThe code reads two input texts, extracts keywords from each, and computes the similarity score between the two keyword lists. The final output is the similarity score printed to the console.",
                "content": "import nltk\nimport gensim.downloader\nfrom nltk.tokenize import sent_tokenize, word_tokenize\nfrom nltk.corpus import stopwords\nimport warnings\n\ninput_text1 = \"\"\"\nI want to modify the maxProfit function to have an initial maxP value of 10\n\"\"\"\n\ninput_text2 = \"\"\"\nThe maxProfit function is part of a C++ class Solution. It calculates the maximum profit that can be made from a list of stock prices (prices). The function follows these steps:\n\nInitialize Profit: It initializes maxP, the maximum profit, to 0.\nIterate Through Prices: It loops through the list of prices from the second element (index 1) to the end.\nCalculate Profit: If the current price is higher than the previous price, it calculates the profit by subtracting the previous price from the current price and adds it to maxP.\nReturn Profit: The function returns the accumulated maxP as the maximum profit.\nOverall, this function implements a simple algorithm for finding the total profit from multiple price increases in a stock price list, where each increase represents a buy-and-sell opportunity.\n\"\"\"\n\n#######################extract keywords#######################\n\n#download necessary resources\n# nltk.download('averaged_perceptron_tagger')\n# nltk.download(\"punkt\")\n# nltk.download(\"stopwords\")\n\ndef extract_keywords(text):\n    #tokenize the text into words\n    tokens = word_tokenize(text)\n    #define a set of common English stopwords\n    stop_words = set(stopwords.words(\"english\"))\n    #filter out stopwords and keep significant words(i.e. nouns, verbs)\n    filtered_tokens = [word for word in tokens if word.lower() not in stop_words]\n    keywords = []\n    #identify keywords using part-of-speech tagging\n    pos_tags = nltk.pos_tag(filtered_tokens)\n    #keep only nouns, proper nouns, and verbs\n    for word, pos in pos_tags:\n        if pos.startswith(\"NN\") or pos.startswith(\"VB\"):\n            keywords.append(word)\n    unique_keywords = list(set(keywords))\n    return unique_keywords\n\n# print(extract_keywords(input_text1))\n\n#######################compute the similarity between keywords#######################\n\nwarnings.filterwarnings(action='ignore')\n#  Reads \u2018context.txt\u2019 file (for our application this will be the aggrgated summary report for a code file)\nsample = open(\"/Users/trav/Documents/projects/codesense/keyword_extraction/context.txt\")\ns = sample.read()\n# Replaces escape character with space\nf = s.replace(\"\\n\", \" \")\ndata = []\n# iterate through each sentence in the file\nfor i in sent_tokenize(f):\n    temp = []\n    # tokenize the sentence into words\n    for j in word_tokenize(i):\n        temp.append(j.lower())\n    data.append(temp)\nmodel = gensim.models.Word2Vec(data, min_count=1,\n                                vector_size=100, window=5, sg=1)\n\ndef compare_words(w1, w2):\n    if w1 == w2:\n        return 1\n    if w1 in model.wv and w2 in model.wv:\n        return model.wv.similarity(w1, w2)\n    else:\n        return 0\n\ndef compare_keywords(l1, l2):\n    output = 0\n    for word1 in l1:\n        word1 = word1.lower()\n        for word2 in l2:\n            output += compare_words(word1, word2.lower())\n    return output\n\nlist1 = extract_keywords(input_text1)\nlist2 = extract_keywords(input_text2)\nprint(compare_keywords(list1, list2))\n"
            }
        }
    ]
}