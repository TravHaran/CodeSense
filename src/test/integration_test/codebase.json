{
    "name": "",
    "type": "folder",
    "keywords": [],
    "children": [
        {
            "name": "Cargo.lock",
            "type": "file",
            "keywords": [
                "correct",
                "provided",
                "code",
                "dependencies",
                "version",
                "checksum",
                "validation",
                "manager",
                "Cargo",
                "crates.io",
                "edited",
                "itertools",
                "generated",
                "projects",
                "file",
                "segment",
                "required",
                "crates",
                "calc",
                "dependency",
                "sourced",
                "project",
                "Cargo.toml",
                "Rust",
                "builds",
                "specifies",
                "lock",
                "ensures",
                "versions",
                "lists",
                "package",
                "packages",
                "used"
            ],
            "annotation": "The provided code is a segment of a `Cargo.toml` lock file used in Rust projects. It lists specific packages (crates) and their dependencies required for the project. The code specifies three packages: \"calc\" (version 0.1.0) with a dependency on \"itertools\", \"either\" (version 1.6.1) sourced from crates.io with a checksum for validation, and \"itertools\" (version 0.10.0) also from crates.io, with its own dependency on \"either\". This file is automatically generated by Cargo, Rust's package manager, and shouldn't be manually edited. The code ensures that the project builds with the correct versions of these dependencies.",
            "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\n[[package]]\nname = \"calc\"\nversion = \"0.1.0\"\ndependencies = [\n \"itertools\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457\"\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37d572918e350e82412fe766d24b15e6682fb2ed2bbe018280caa810397cb319\"\ndependencies = [\n \"either\",\n]\n"
        },
        {
            "name": "Cargo.toml",
            "type": "file",
            "keywords": [
                "uses",
                "code",
                "dependencies",
                "version",
                "email",
                "define",
                "referenced",
                "manager",
                "crate",
                "Cargo",
                "GitHub",
                "file",
                "section",
                "calc",
                "dependency",
                "project",
                "Cargo.toml",
                "Rust",
                "compile",
                "specifies",
                "Boisdequin",
                "manage",
                "package",
                "edition",
                "author",
                "given",
                "used",
                "declares",
                "helps",
                "Henry",
                "name"
            ],
            "annotation": "The given code is a snippet from a Rust project's Cargo.toml file, which is used to define the project's metadata and manage its dependencies. This specific section specifies the package name as \"calc\", the version as \"0.1.0\", and the author as Henry Boisdequin with an email referenced from GitHub. The project uses the 2018 edition of Rust. In the dependencies section, it declares a dependency on the \"itertools\" crate, version \"0.10\". This file helps Cargo, Rust's package manager, to compile, package, and manage the project.",
            "content": "[package]\nname = \"calc\"\nversion = \"0.1.0\"\nauthors = [\"Henry Boisdequin <65845077+henryboisdequin@users.noreply.github.com>\"]\nedition = \"2018\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nitertools = \"0.10\"\n"
        },
        {
            "name": "README.md",
            "type": "file",
            "keywords": [
                "contain",
                "navigate",
                "provided",
                "code",
                "perform",
                "input",
                "ensure",
                "execute",
                "based",
                "run",
                "Cargo",
                "operations",
                "calculator",
                "directory",
                "program",
                "command-line",
                "includes",
                "project",
                "installed",
                "Rust",
                "need",
                "test",
                "instructions",
                "implementation",
                "cargo",
                "clone",
                "repository",
                "running",
                "testing"
            ],
            "annotation": "The code you provided doesn't contain the actual implementation of the simple command-line calculator in Rust. However, it includes instructions for running and testing a Rust project. To run the project, you need to clone the repository, ensure Rust and Cargo are installed, navigate to the project directory, and execute `cargo run` to compile and run the program. To test it, you execute `cargo test`. The command-line calculator itself would likely perform basic arithmetic operations based on user input.",
            "content": "Simple command-line calculator in Rust.\n\n## To Run\n\n1. Clone this repository\n\n2. Make sure you have Rust and cargo installed\n\n3. Cd into the project directory and type `cargo run`\n\n4. To test: run `cargo test`\n"
        },
        {
            "name": "src",
            "type": "folder",
            "keywords": [],
            "children": [
                {
                    "name": "calc.rs",
                    "type": "file",
                    "keywords": [
                        "elements",
                        "test_all_operations",
                        "provided",
                        "using",
                        "code",
                        "provides",
                        "multiplication",
                        "tests",
                        "perform",
                        "subtracts",
                        "struct",
                        "mul",
                        "subtraction",
                        "crate",
                        "written",
                        "divides",
                        "operations",
                        "unit",
                        "verify",
                        "division",
                        "method",
                        "f64",
                        "itertools",
                        "numbers",
                        "includes",
                        "Expected",
                        "vector",
                        "Rust",
                        ">",
                        "sub",
                        "defines",
                        "multiplies",
                        "demonstrate",
                        "div",
                        "iterator",
                        "addition",
                        "function",
                        "methods"
                    ],
                    "annotation": "The code is written in Rust and defines a struct `Calc` that provides basic arithmetic operations (addition, subtraction, multiplication, and division) on a vector of floating-point numbers (`Vec<f64>`). The `add` method sums all elements, `sub` method subtracts elements sequentially, `mul` method multiplies all elements, and `div` method divides the elements sequentially, each using iterator methods provided by the `itertools` crate. The `test_all_operations` function includes unit tests to verify the correctness of these methods. Expected outputs demonstrate that the methods perform standard arithmetic operations correctly.",
                    "content": "use itertools::Itertools;\nuse std::ops::{Div, Sub};\n\npub struct Calc;\n\nimpl Calc {\n    pub fn add(arr: Vec<f64>) -> f64 {\n        arr.iter().sum::<f64>()\n    }\n\n    pub fn sub(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Sub::sub).unwrap_or(0.0)\n    }\n\n    pub fn mul(arr: Vec<f64>) -> f64 {\n        arr.iter().product()\n    }\n\n    pub fn div(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Div::div).unwrap_or(0.0)\n    }\n}\n\n#[test]\nfn test_all_operations() {\n    // addition\n    assert_eq!(Calc::add([2.0, 4.0, 6.0].to_vec()), 12.0);\n    assert_eq!(Calc::add([-6.0, 5.0, 10.0].to_vec()), 9.0);\n\n    // subtraction\n    assert_eq!(Calc::sub([10.0, 4.0, 6.0].to_vec()), 0.0);\n    assert_eq!(Calc::sub([100.0, 10.0, 19.0].to_vec()), 71.0);\n\n    // multiplication\n    assert_eq!(Calc::mul([10.0, 10.0, 2.0].to_vec()), 200.0);\n    assert_eq!(Calc::mul([-3.0, 2.0].to_vec()), -6.0);\n\n    // division\n    assert_eq!(Calc::div([54.0, 2.0, 3.0].to_vec()), 9.0);\n    assert_eq!(Calc::div([4.0, 2.0, 5.0].to_vec()), 0.4);\n}\n"
                },
                {
                    "name": "main.rs",
                    "type": "file",
                    "keywords": [
                        "qThanks",
                        "+",
                        "q",
                        "built",
                        "uses",
                        "code",
                        "multiplication",
                        "interaction",
                        "perform",
                        "input",
                        "using",
                        "program.",
                        "operator",
                        "calculation",
                        "example",
                        "result",
                        "prompts",
                        "subtraction",
                        "module",
                        "written",
                        "based",
                        "checks",
                        "user",
                        "division",
                        "calculator",
                        "program",
                        "numbers",
                        "output",
                        "converts",
                        "specified",
                        "Calc",
                        "/",
                        "message",
                        "Rust",
                        "expected",
                        "Rust.Please",
                        "input.Here",
                        "parts",
                        "vary",
                        "quit",
                        "reads",
                        "printed",
                        "equation",
                        "splits",
                        "operators",
                        "addition",
                        "implements",
                        "presence",
                        "inputs",
                        "basic",
                        "enter",
                        "split",
                        "exits"
                    ],
                    "annotation": "The code, written in Rust, implements a simple command-line calculator. It repeatedly prompts the user to input an equation or \"q\" to quit. The program reads the input, checks for the presence of valid operators (+, -, *, /), and then splits the input based on the operator. It converts the split parts into numbers and uses the Calc module to perform the specified calculation (addition, subtraction, multiplication, division). The result of the calculation is then printed. If the user inputs \"q\", the program exits with a thank-you message. The expected output will vary based on the user's input.\n\nHere's an example interaction:\n```\nWelcome to the a basic calculator built with Rust.\nPlease enter an equation or \"q\" to quit: \n2 + 3\n5.0\nPlease enter an equation or \"q\" to quit: \nq\nThanks for using this program.\n```",
                    "content": "mod calc;\nuse calc::Calc;\nuse std::io;\n\nfn main() {\n    println!(\"Welcome to the a basic calculator built with Rust.\");\n\n    loop {\n        println!(\"Please enter an equation or \\\"q\\\" to quit: \");\n\n        let mut input = String::new();\n        io::stdin()\n            .read_line(&mut input)\n            .expect(\"Failed to read input\");\n\n        if input.trim() == \"q\" {\n            println!(\"Thanks for using this program.\");\n            break;\n        }\n\n        let valid_operators = vec![\"+\", \"-\", \"*\", \"/\"];\n\n        for operator in valid_operators {\n            match input.find(operator) {\n                Some(_) => {\n                    let parts: Vec<&str> = input.split(operator).collect();\n\n                    if parts.len() < 2 {\n                        panic!(\"Invalid equation.\");\n                    }\n\n                    let mut number_array = vec![];\n                    let mut counter = 0;\n\n                    while counter != parts.len() {\n                        let val: f64 = parts[counter].trim().parse().ok().expect(\"Enter a number.\");\n                        number_array.push(val);\n                        counter += 1;\n                    }\n\n                    match operator {\n                        \"+\" => println!(\"{}\", Calc::add(number_array)),\n                        \"-\" => println!(\"{}\", Calc::sub(number_array)),\n                        \"*\" => println!(\"{}\", Calc::mul(number_array)),\n                        \"/\" => println!(\"{}\", Calc::div(number_array)),\n                        _ => println!(\"Only addition, subtraction, multiplication and division are supported.\")\n                    }\n                }\n\n                None => {\n                    continue;\n                }\n            }\n        }\n    }\n}\n"
                }
            ]
        }
    ]
}