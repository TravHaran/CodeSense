{
    "name": "rust-calculator",
    "type": "folder",
    "keywords": [],
    "children": [
        {
            "name": "Cargo.toml",
            "type": "file",
            "keywords": [
                "crate",
                "TOML",
                "code",
                "version",
                "dependency",
                "manage",
                "dependencies",
                "Henry",
                "edition",
                "file",
                "written",
                "calc",
                "Boisdequin",
                "serves",
                "Obvious",
                "package",
                "configuration",
                "Cargo",
                "information",
                "declares",
                "project",
                "manager",
                "used",
                "author",
                "Minimal",
                "specifying",
                "Tom",
                "Language",
                "name",
                "Rust"
            ],
            "annotation": "The code is written in TOML (Tom's Obvious, Minimal Language) and serves as a Cargo manifest file for a Rust project. It defines the package information by specifying the name \"calc\", version \"0.1.0\", author \"Henry Boisdequin\", and the Rust edition \"2018\". Additionally, it declares a dependency on the \"itertools\" crate, version \"0.10\". This configuration will be used by Cargo, Rust's package manager, to manage the project and its dependencies.",
            "content": "[package]\nname = \"calc\"\nversion = \"0.1.0\"\nauthors = [\"Henry Boisdequin <65845077+henryboisdequin@users.noreply.github.com>\"]\nedition = \"2018\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nitertools = \"0.10\"\n"
        },
        {
            "name": "Cargo.lock",
            "type": "file",
            "keywords": [
                "registry",
                "TOML",
                "ensure",
                "snippet",
                "provided",
                "version",
                "pulled",
                "packages",
                "dependencies",
                "specifies",
                "versions",
                "reproducibility",
                "file",
                "written",
                "calc",
                "depends",
                "Obvious",
                "Cargo.toml.lock",
                "lists",
                "package",
                "indicates",
                "Cargo",
                "checksums",
                "includes",
                "index",
                "project",
                "manager",
                "used",
                "Minimal",
                "Tom",
                "projects",
                "itertools",
                "Language",
                "Rust"
            ],
            "annotation": "The provided content is a snippet from a `Cargo.toml.lock` file, written in TOML (Tom's Obvious, Minimal Language), which is used by the Cargo package manager for Rust projects. This file specifies the dependencies for a Rust project and includes exact versions and checksums to ensure reproducibility. It lists three packages: `calc` version 0.1.0, `either` version 1.6.1, and `itertools` version 0.10.0. The `itertools` package depends on the `either` package. The file indicates that these dependencies are pulled from the crates.io index, which is the official package registry for Rust.",
            "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\n[[package]]\nname = \"calc\"\nversion = \"0.1.0\"\ndependencies = [\n \"itertools\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457\"\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37d572918e350e82412fe766d24b15e6682fb2ed2bbe018280caa810397cb319\"\ndependencies = [\n \"either\",\n]\n"
        },
        {
            "name": "README.md",
            "type": "file",
            "keywords": [
                "ensure",
                "command",
                "provided",
                "code",
                "execute",
                "cargo",
                "outlines",
                "enabling",
                "installed",
                "run",
                "line",
                "navigate",
                "need",
                "cases",
                "directory",
                "test",
                "perform",
                "use",
                "package",
                "operations",
                "system",
                "application",
                "compile",
                "explanation",
                "included",
                "project",
                "calculator",
                "manager",
                "repository",
                "setup",
                "implemented",
                "containing",
                "Rust"
            ],
            "annotation": "The provided explanation outlines a simple command-line calculator implemented in Rust. To run this calculator, you need to clone the repository containing the code, ensure that Rust and the cargo package manager are installed on your system, navigate to the project directory, and run the command `cargo run`. To execute any test cases included in the project, use the command `cargo test`. This setup will compile and run the calculator application, enabling you to perform basic arithmetic operations via the command line.",
            "content": "Simple command-line calculator in Rust.\n\n## To Run\n\n1. Clone this repository\n\n2. Make sure you have Rust and cargo installed\n\n3. Cd into the project directory and type `cargo run`\n\n4. To test: run `cargo test`\n"
        },
        {
            "name": "src",
            "type": "folder",
            "keywords": [],
            "children": [
                {
                    "name": "main.rs",
                    "type": "file",
                    "keywords": [
                        "result",
                        "splits",
                        "ends",
                        "list",
                        "code",
                        "program",
                        "addition",
                        "equation",
                        "predefined",
                        "subtraction",
                        "applies",
                        "q",
                        "include",
                        "message",
                        "numbers",
                        "reads",
                        "written",
                        "serves",
                        "prompts",
                        "breaks",
                        "perform",
                        "operators",
                        "operations",
                        "operator",
                        "operation",
                        "using",
                        "quit",
                        "printed",
                        "multiplication",
                        "substrings",
                        "calculator",
                        "Calc",
                        "converts",
                        "used",
                        "checks",
                        "division",
                        "input",
                        "valid",
                        "corresponding",
                        "module",
                        "Rust"
                    ],
                    "annotation": "The code is written in Rust and serves as a basic calculator program. It repeatedly prompts the user to enter a mathematical equation or \"q\" to quit. The `Calc` module is used to perform arithmetic operations, which include addition, subtraction, multiplication, and division. The program reads user input, checks for valid operators from a predefined list, splits the input by the operator, converts the substrings into floating-point numbers, and applies the corresponding arithmetic operation using the `Calc` module. The result is then printed. If the input is \"q\", the loop breaks, and the program ends with a thank-you message.",
                    "content": "mod calc;\nuse calc::Calc;\nuse std::io;\n\nfn main() {\n    println!(\"Welcome to the a basic calculator built with Rust.\");\n\n    loop {\n        println!(\"Please enter an equation or \\\"q\\\" to quit: \");\n\n        let mut input = String::new();\n        io::stdin()\n            .read_line(&mut input)\n            .expect(\"Failed to read input\");\n\n        if input.trim() == \"q\" {\n            println!(\"Thanks for using this program.\");\n            break;\n        }\n\n        let valid_operators = vec![\"+\", \"-\", \"*\", \"/\"];\n\n        for operator in valid_operators {\n            match input.find(operator) {\n                Some(_) => {\n                    let parts: Vec<&str> = input.split(operator).collect();\n\n                    if parts.len() < 2 {\n                        panic!(\"Invalid equation.\");\n                    }\n\n                    let mut number_array = vec![];\n                    let mut counter = 0;\n\n                    while counter != parts.len() {\n                        let val: f64 = parts[counter].trim().parse().ok().expect(\"Enter a number.\");\n                        number_array.push(val);\n                        counter += 1;\n                    }\n\n                    match operator {\n                        \"+\" => println!(\"{}\", Calc::add(number_array)),\n                        \"-\" => println!(\"{}\", Calc::sub(number_array)),\n                        \"*\" => println!(\"{}\", Calc::mul(number_array)),\n                        \"/\" => println!(\"{}\", Calc::div(number_array)),\n                        _ => println!(\"Only addition, subtraction, multiplication and division are supported.\")\n                    }\n                }\n\n                None => {\n                    continue;\n                }\n            }\n        }\n    }\n}\n"
                },
                {
                    "name": "calc.rs",
                    "type": "file",
                    "keywords": [
                        "f64",
                        "provided",
                        "list",
                        "code",
                        "addition",
                        "uses",
                        "subtraction",
                        "elements",
                        "results",
                        "contains",
                        "vectors",
                        "unit",
                        "assertions",
                        "numbers",
                        "tests",
                        "verify",
                        "written",
                        "element.The",
                        "return",
                        "expected",
                        "Expected",
                        "behave",
                        "defines",
                        "operations",
                        "output",
                        "mul",
                        "subsequent",
                        "element",
                        "sub",
                        "multiplication",
                        "methods",
                        "work",
                        "div",
                        "intended",
                        "test_all_operations",
                        "check",
                        "confirm",
                        ">",
                        "add",
                        "Calc",
                        "Subtracts",
                        "struct",
                        "division",
                        "Multiplies",
                        "Divides",
                        "function",
                        "provides",
                        "Rust",
                        "aggregation"
                    ],
                    "annotation": "This code is written in Rust and defines a `Calc` struct that provides methods for basic arithmetic operations: addition, subtraction, multiplication, and division on vectors of floating-point numbers (`Vec<f64>`). The methods `add`, `sub`, `mul`, and `div` perform aggregation operations on the provided list of numbers. \n\n- `add`: Sums all elements in the vector.\n- `sub`: Subtracts each subsequent element from the first element.\n- `mul`: Multiplies all elements together.\n- `div`: Divides the first element by each subsequent element.\n\nThe `test_all_operations` function contains unit tests to verify that these methods work as expected. It uses assertions to check that the operations return the correct results for various input vectors. Expected output for the tests would confirm all operations behave as intended.",
                    "content": "use itertools::Itertools;\nuse std::ops::{Div, Sub};\n\npub struct Calc;\n\nimpl Calc {\n    pub fn add(arr: Vec<f64>) -> f64 {\n        arr.iter().sum::<f64>()\n    }\n\n    pub fn sub(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Sub::sub).unwrap_or(0.0)\n    }\n\n    pub fn mul(arr: Vec<f64>) -> f64 {\n        arr.iter().product()\n    }\n\n    pub fn div(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Div::div).unwrap_or(0.0)\n    }\n}\n\n#[test]\nfn test_all_operations() {\n    // addition\n    assert_eq!(Calc::add([2.0, 4.0, 6.0].to_vec()), 12.0);\n    assert_eq!(Calc::add([-6.0, 5.0, 10.0].to_vec()), 9.0);\n\n    // subtraction\n    assert_eq!(Calc::sub([10.0, 4.0, 6.0].to_vec()), 0.0);\n    assert_eq!(Calc::sub([100.0, 10.0, 19.0].to_vec()), 71.0);\n\n    // multiplication\n    assert_eq!(Calc::mul([10.0, 10.0, 2.0].to_vec()), 200.0);\n    assert_eq!(Calc::mul([-3.0, 2.0].to_vec()), -6.0);\n\n    // division\n    assert_eq!(Calc::div([54.0, 2.0, 3.0].to_vec()), 9.0);\n    assert_eq!(Calc::div([4.0, 2.0, 5.0].to_vec()), 0.4);\n}\n"
                }
            ]
        }
    ]
}