{
    "name": "",
    "type": "folder",
    "keywords": [],
    "children": [
        {
            "name": "Cargo.lock",
            "type": "file",
            "keywords": [
                "snippet",
                "specified",
                "generated",
                "Rust",
                "written",
                "Language",
                "TOML",
                "itertools",
                "Minimal",
                "version",
                "metadata",
                "manager",
                "calc",
                "meant",
                "dependencies",
                "lists",
                "manage",
                "specifies",
                "package",
                "comment",
                "configuration",
                "Obvious",
                "track",
                "packages",
                "depends",
                "editing",
                "Tom",
                "file",
                "project",
                "Cargo"
            ],
            "annotation": "This snippet is a configuration file generated by Cargo, a Rust package manager. It is written in TOML (Tom's Obvious, Minimal Language) and lists the Rust project dependencies and metadata. The file specifies three packages: \"calc\" (version 0.1.0), \"either\" (version 1.6.1), and \"itertools\" (version 0.10.0). The \"calc\" package depends on \"itertools,\" and \"itertools\" itself depends on \"either.\" This file is not meant for manual editing, as indicated by the comment. The purpose is to manage and track the specified project dependencies.",
            "content": "# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\n[[package]]\nname = \"calc\"\nversion = \"0.1.0\"\ndependencies = [\n \"itertools\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457\"\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37d572918e350e82412fe766d24b15e6682fb2ed2bbe018280caa810397cb319\"\ndependencies = [\n \"either\",\n]\n"
        },
        {
            "name": "Cargo.toml",
            "type": "file",
            "keywords": [
                "Boisdequin",
                "build",
                "information",
                "Cargo",
                "provide",
                "Rust",
                "written",
                "dependency",
                "Language",
                "TOML",
                "itertools",
                "purpose",
                "version",
                "Minimal",
                "metadata",
                "author",
                "manager",
                "defines",
                "lists",
                "named",
                "specifies",
                "manage",
                "code",
                "package",
                "declares",
                "Obvious",
                "crate",
                "edition",
                "Tom",
                "Henry",
                "adheres",
                "project",
                "calc"
            ],
            "annotation": "The code is written in TOML (Tom's Obvious, Minimal Language) and defines a package manifest for a Rust project. It specifies metadata for the package named \"calc\" with version \"0.1.0\" and lists Henry Boisdequin as the author. The project adheres to the Rust 2018 edition. Additionally, it declares a dependency on the `itertools` crate version \"0.10\". The purpose of this manifest is to provide Cargo, Rust's package manager, with the necessary information to build and manage the project.",
            "content": "[package]\nname = \"calc\"\nversion = \"0.1.0\"\nauthors = [\"Henry Boisdequin <65845077+henryboisdequin@users.noreply.github.com>\"]\nedition = \"2018\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\nitertools = \"0.10\"\n"
        },
        {
            "name": "README.md",
            "type": "file",
            "keywords": [
                "clone",
                "repository",
                "calculator",
                "containing",
                "functionality",
                "inferred",
                "Rust",
                "written",
                "test",
                "system",
                "ensure",
                "run",
                "installed",
                "describes",
                "manager",
                "directory",
                "tests",
                "code",
                "application",
                "package",
                "project",
                "instruction",
                "provided",
                "cargo",
                "navigate",
                "steps",
                "perform",
                "set",
                "use",
                "operations",
                "Cargo"
            ],
            "annotation": "This instruction set describes how to run a simple command-line calculator written in Rust. To use it, follow these steps: clone the repository containing the code, ensure that Rust and its package manager Cargo are installed on your system, navigate to the project directory, and execute `cargo run` to start the calculator. To run tests, use `cargo test`. There isn't actual code provided here, so its purpose and functionality are inferred from the context of a typical command-line calculator application in Rust, which would likely perform basic arithmetic operations.",
            "content": "Simple command-line calculator in Rust.\n\n## To Run\n\n1. Clone this repository\n\n2. Make sure you have Rust and cargo installed\n\n3. Cd into the project directory and type `cargo run`\n\n4. To test: run `cargo test`\n"
        },
        {
            "name": "src",
            "type": "folder",
            "keywords": [],
            "children": [
                {
                    "name": "calc.rs",
                    "type": "file",
                    "keywords": [
                        "correctness",
                        "Calc",
                        "empty",
                        "calculator",
                        "struct",
                        "div",
                        "Expected",
                        "Rust",
                        "returning",
                        "multiplication",
                        "sub",
                        "ensure",
                        "inputs",
                        "methods",
                        "Itertools",
                        "test_all_operations",
                        "numbers",
                        "results",
                        "produce",
                        "mul",
                        ":add",
                        "defines",
                        "tests",
                        "code",
                        "checking",
                        "resulting",
                        ".to_vec",
                        "division",
                        "apply",
                        "operations\u2014addition",
                        "elements",
                        "crate",
                        "function",
                        "add",
                        "product",
                        "taking",
                        "involve",
                        "iterator",
                        "operation",
                        "]",
                        "performing",
                        "subtraction",
                        "use",
                        "vector",
                        "operations"
                    ],
                    "annotation": "This Rust code defines a calculator with basic arithmetic operations\u2014addition, subtraction, multiplication, and division. The `Calc` struct has methods `add`, `sub`, `mul`, and `div`, each taking a vector of `f64` (floating-point numbers) and performing the respective operation across the elements. The `add` and `mul` methods directly use iterator methods `sum` and `product` respectively. The `sub` and `div` methods use `fold1` from the `Itertools` crate to apply subtraction and division between elements, returning 0.0 if the vector is empty. The `test_all_operations` function tests these methods with various inputs to ensure correctness. Expected outputs involve checking that the operations produce the correct results, such as `Calc::add([2.0, 4.0, 6.0].to_vec())` resulting in `12.0`.",
                    "content": "use itertools::Itertools;\nuse std::ops::{Div, Sub};\n\npub struct Calc;\n\nimpl Calc {\n    pub fn add(arr: Vec<f64>) -> f64 {\n        arr.iter().sum::<f64>()\n    }\n\n    pub fn sub(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Sub::sub).unwrap_or(0.0)\n    }\n\n    pub fn mul(arr: Vec<f64>) -> f64 {\n        arr.iter().product()\n    }\n\n    pub fn div(arr: Vec<f64>) -> f64 {\n        arr.iter().map(|&x| x as f64).fold1(Div::div).unwrap_or(0.0)\n    }\n}\n\n#[test]\nfn test_all_operations() {\n    // addition\n    assert_eq!(Calc::add([2.0, 4.0, 6.0].to_vec()), 12.0);\n    assert_eq!(Calc::add([-6.0, 5.0, 10.0].to_vec()), 9.0);\n\n    // subtraction\n    assert_eq!(Calc::sub([10.0, 4.0, 6.0].to_vec()), 0.0);\n    assert_eq!(Calc::sub([100.0, 10.0, 19.0].to_vec()), 71.0);\n\n    // multiplication\n    assert_eq!(Calc::mul([10.0, 10.0, 2.0].to_vec()), 200.0);\n    assert_eq!(Calc::mul([-3.0, 2.0].to_vec()), -6.0);\n\n    // division\n    assert_eq!(Calc::div([54.0, 2.0, 3.0].to_vec()), 9.0);\n    assert_eq!(Calc::div([4.0, 2.0, 5.0].to_vec()), 0.4);\n}\n"
                },
                {
                    "name": "main.rs",
                    "type": "file",
                    "keywords": [
                        "Calc",
                        "calculator",
                        "q",
                        "prompts",
                        "+",
                        "input",
                        "div",
                        "Rust",
                        "calculation",
                        "equation",
                        "expected",
                        "parts",
                        "result",
                        "handled",
                        "parsing",
                        "splitting",
                        "user",
                        "output",
                        "methods",
                        "based",
                        "entered",
                        "numbers",
                        "calculations",
                        "mul",
                        "code",
                        "converts",
                        "panics",
                        "supports",
                        "operator",
                        "thanks",
                        "module",
                        "message",
                        "function",
                        "add",
                        "termination",
                        "implements",
                        "type",
                        "quit",
                        "/",
                        "terminates",
                        "perform",
                        "program",
                        "found",
                        "split",
                        "operations",
                        "calc"
                    ],
                    "annotation": "This Rust code implements a basic command-line calculator. The main function repeatedly prompts the user to enter a mathematical equation or type \"q\" to quit. If \"q\" is entered, the program thanks the user and terminates. The code supports simple arithmetic operations (+, -, *, /) by parsing the user's input, splitting it based on the operator found, and then converts the split parts into numbers to perform the calculation. These calculations are handled by methods (add, sub, mul, div) in the Calc module from the `calc` library. If an invalid equation is entered, the program panics and prompts for correct input. The expected output will be the result of the entered equation or a termination message when \"q\" is input.",
                    "content": "mod calc;\nuse calc::Calc;\nuse std::io;\n\nfn main() {\n    println!(\"Welcome to the a basic calculator built with Rust.\");\n\n    loop {\n        println!(\"Please enter an equation or \\\"q\\\" to quit: \");\n\n        let mut input = String::new();\n        io::stdin()\n            .read_line(&mut input)\n            .expect(\"Failed to read input\");\n\n        if input.trim() == \"q\" {\n            println!(\"Thanks for using this program.\");\n            break;\n        }\n\n        let valid_operators = vec![\"+\", \"-\", \"*\", \"/\"];\n\n        for operator in valid_operators {\n            match input.find(operator) {\n                Some(_) => {\n                    let parts: Vec<&str> = input.split(operator).collect();\n\n                    if parts.len() < 2 {\n                        panic!(\"Invalid equation.\");\n                    }\n\n                    let mut number_array = vec![];\n                    let mut counter = 0;\n\n                    while counter != parts.len() {\n                        let val: f64 = parts[counter].trim().parse().ok().expect(\"Enter a number.\");\n                        number_array.push(val);\n                        counter += 1;\n                    }\n\n                    match operator {\n                        \"+\" => println!(\"{}\", Calc::add(number_array)),\n                        \"-\" => println!(\"{}\", Calc::sub(number_array)),\n                        \"*\" => println!(\"{}\", Calc::mul(number_array)),\n                        \"/\" => println!(\"{}\", Calc::div(number_array)),\n                        _ => println!(\"Only addition, subtraction, multiplication and division are supported.\")\n                    }\n                }\n\n                None => {\n                    continue;\n                }\n            }\n        }\n    }\n}\n"
                }
            ]
        }
    ]
}